__NUXT_JSONP__("/post/695", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {data:[{post:{id:695,date:m,date_gmt:n,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=695"},modified:m,modified_gmt:n,slug:"jsonloadsave",status:"publish",type:"post",link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F09\u002F22\u002Fjsonloadsave\u002F",title:{rendered:"JsonUtilityでセーブとロードをする"},content:{rendered:"\n\u003Cp\u003E2DのTileMapゲームで厄介だったのがセーブとロード機能だった。\u003Cbr \u002F\u003EJsonUtilityを利用するとゲームのオブジェクトをJson形式で保存することができる\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまず必要なのは保存対象とするものを決定しておくことです。\u003Cbr \u002F\u003E後からこれも保存したいとかあれも保存したいとかってなると、保存した結果どうやって読み込むの？っていう事態になります。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eセーブデータのクラス\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E今回はかなり甘いのですがidとプレイヤーの位置を保存できるようにします。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n&#91;System.Serializable]\npublic class SaveData\n{\n    public List&lt;int\u003E ids;\n    public List&lt;int\u003E mustIds;\n    public Vector2 playerPosition;\n    public string sceneName;\n    public SaveData()\n    {\n        this.ids = new List&lt;int\u003E();\n        this.mustIds = new List&lt;int\u003E();\n        this.playerPosition = new Vector2();\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eこれが保存対象です。このクラスがJson形式となって保存されます。\u003Cbr \u002F\u003Eポイントとしてはクラスの前に[System.Serializable]という宣言があることです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこれがあるとシリアライズ可能なクラスになります。\u003Cbr \u002F\u003E仕事ではJavaを使っているのですが、Javaでも時々シリアライズってのを継承しているクラスがでてきて、なんだこれって読み飛ばしていたんですが、オブジェクトなどをファイルに保存したりネットワークで送受信できるようにすることらしいです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまぁこれが保存対象なので当然といえば当然かもしれませんね。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eセーブを行うクラス\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E実際に作ったゲームで使用したコードをそのまま掲載します\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eusing UnityEngine;\nusing System.IO;\npublic class SaveJson : MonoBehaviour\n{\n    const string SYSTEM_DATA_PATH = \"save.txt\";\n    public void save()\n    {\n        SaveData savedata = new SaveData();\n        \u002F\u002F最初に空にする\n        foreach(int id in savedata.ids)\n        {\n            savedata.ids.Remove(id);\n        }\n        foreach(int id in savedata.mustIds)\n        {\n            savedata.mustIds.Remove(id);\n        }\n        \u002F\u002F 非活性のアイテムリストを取得する\n        setItemIdList(savedata);\n        \u002F\u002F  プレイヤーの場所を保存する\n        setPlayerPosition(savedata);\n        savedata.sceneName = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;\n        \u002F\u002FJson形式で保存する\n        string idsString = JsonUtility.ToJson(savedata);\n        StreamWriter sw = new StreamWriter(Application.dataPath + SYSTEM_DATA_PATH);\n        \u002F\u002FDebug.Log(Application.dataPath);\n        sw.Write(idsString);\n        sw.Close();\n        Debug.Log(\"Save Finished!\");\n        TalkEventManager talkEventManager = GameObject.FindGameObjectWithTag(\"GM\").GetComponent&lt;TalkEventManager\u003E();\n        string&#91;] messages = { \"セーブしました\" };\n        talkEventManager.execute(\"\", messages);\n    }\n    private void setItemIdList(SaveData data)\n    {\n        GameObject parrent = GameObject.FindGameObjectWithTag(\"ItemParrent\");\n        foreach(Transform child in parrent.transform)\n        {\n            \u002F\u002F  非活性の要素のIDを全て取得する\n            \u002F\u002F  Item Event\n            if (!child.gameObject.activeInHierarchy)\n            {\n                data.ids.Add(child.gameObject.GetComponent&lt;EventItem\u003E().getItem().id);\n            }\n        }\n        GameObject mustparrent = GameObject.FindGameObjectWithTag(\"MustParrent\");\n        foreach(Transform child in mustparrent.transform) {\n            if (!child.gameObject.activeInHierarchy)\n            {\n                data.mustIds.Add(child.gameObject.GetComponent&lt;MustTalkEvent\u003E().id);\n            }\n        }\n    }\n    private void setPlayerPosition(SaveData data)\n    {\n        data.playerPosition = GameObject.FindGameObjectWithTag(\"Player\").transform.position;\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eすみません長いのですが、やっていることは単純で、SaveDataクラスを初期化したら、SaveDataクラスのデータをどんどん設定していってる感じです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003ESaveDataクラスをインスタンス化する\u003Cbr \u002F\u003ESaveData savedata = new SaveData();\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこんな感じでSaveDataクラスの設定を行う\u003Cbr \u002F\u003Esavedata.sceneName = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ejson形式(文字列)にする\u003Cbr \u002F\u003Estring idsString = JsonUtility.ToJson(savedata);\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eストリームライターを利用して保存する\u003Cbr \u002F\u003EStreamWriter sw = new StreamWriter(Application.dataPath + SYSTEM_DATA_PATH);\u003Cbr \u002F\u003Esw.Write(idsString);\u003Cbr \u002F\u003Esw.Close();\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eロードを行うクラス\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eこれも実際に書いたコードをそのまま掲載します。道Jsonとなっているのは触れないでくださいね！\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eusing UnityEngine;\nusing System.IO;\npublic class RoadJson : MonoBehaviour\n{\n    const string SYSTEM_DATA_PATH = \"save.txt\";\n    public void loadData()\n    {\n        if (!this.existsFile())\n        {\n            Debug.Log(\"ファイルが見つかりませんでした。\");\n            return;\n        }\n        Debug.Log(\"JSONファイルのロードを開始します\");\n        StreamReader sr = new StreamReader(Application.dataPath + SYSTEM_DATA_PATH);\n        string readJson = sr.ReadToEnd();\n        sr.Close();\n        ItemButtonManager ibm = GameObject.FindGameObjectWithTag(\"GM\").GetComponent&lt;ItemButtonManager\u003E();\n        SaveData data = JsonUtility.FromJson&lt;SaveData\u003E(readJson);\n        GameObject parrent = GameObject.FindGameObjectWithTag(\"ItemParrent\");\n        foreach (Transform child in parrent.transform)\n        {\n            if (data.ids.Contains(child.gameObject.GetComponent&lt;EventItem\u003E().getItem().id))\n            {\n                child.gameObject.SetActive(false);\n                ibm.storeItem(child.gameObject.GetComponent&lt;EventItem\u003E().getItem());\n            }\n        }\n        GameObject mustparrent = GameObject.FindGameObjectWithTag(\"MustParrent\");\n        foreach (Transform child in mustparrent.transform)\n        {\n            if (data.mustIds.Contains(child.gameObject.GetComponent&lt;MustTalkEvent\u003E().id))\n            {\n                child.gameObject.SetActive(false);\n            }\n         }\n        GameObject player = GameObject.FindGameObjectWithTag(\"Player\");\n        player.transform.position = data.playerPosition;\n    }\n    \u002F\u002F\u002F &lt;summary\u003E\n    \u002F\u002F\u002F ファイルが存在するかどうか\n    \u002F\u002F\u002F 存在する場合はTrueを返します。\n    \u002F\u002F\u002F &lt;\u002Fsummary\u003E\n    \u002F\u002F\u002F &lt;returns\u003E&lt;\u002Freturns\u003E\n    private bool existsFile()\n    {\n        if (File.Exists(Application.dataPath + SYSTEM_DATA_PATH)){\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eこれもやっていることは単純です。\u003Cbr \u002F\u003EまずはSaveDataクラスを文字列からオブジェクトにします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまずは文字列を読み込む\u003Cbr \u002F\u003EStreamReader sr = new StreamReader(Application.dataPath + SYSTEM_DATA_PATH);\u003Cbr \u002F\u003Estring readJson = sr.ReadToEnd();\u003Cbr \u002F\u003Esr.Close();\u003C\u002Fp\u003E\n\n\n\u003Cp\u003ESaveDataクラスに変換する\u003Cbr \u002F\u003ESaveData data = JsonUtility.FromJson(readJson);\u003C\u002Fp\u003E\n\n\n\u003Cp\u003ESaveDataクラスの設定を反映させる\u003Cbr \u002F\u003Eplayer.transform.position = data.playerPosition;\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eあとがき\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eゲームを作ろうって思って勉強していると、色々な情報に出会います。Json形式で保存するというのもその一つです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eしかし実際にゲームを作るときは&#8221;テスト&#8221;なんて文字列を保存することはありません。実際に保存するのは&#8221;セーブデータ&#8221;です。\u003Cbr \u002F\u003Eなのでどうやってロードするのか？まで考えてやらないとダメですね。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eそして、後から後から機能を追加しようってなると、セーブデータにも影響します。\u003Cbr \u002F\u003Eなのでゲームを作るときは必要最低限のものは予め決めておくことが重要。変化に強い設計をすればいいんだろうけど、、私にはまだ難しい。\u003C\u002Fp\u003E\n",protected:j},excerpt:{rendered:"\u003Cp\u003E2DのTileMapゲームで厄介だったのがセーブとロード機能だった。JsonUtilityを利用するとゲームのオブジェクトをJson形式で保存することができる まず必要なのは保存対象とするものを決定しておくことです。後か&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F09\u002F22\u002Fjsonloadsave\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EJsonUtilityでセーブとロードをする\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:j},author:k,featured_media:b,comment_status:o,ping_status:o,sticky:j,template:c,format:"standard",meta:[],categories:[l],tags:[36,51],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F695"}],collection:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=695"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F695\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=695"}],"wp:term":[{taxonomy:d,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=695"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=695"}],curies:[{name:e,href:f,templated:a}]}}}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:e,href:f,templated:a}]}},{id:p,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:e,href:f,templated:a}]}},{id:77,count:k,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fgulp\u002F",name:q,slug:q,taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F77"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=77"}],curies:[{name:e,href:f,templated:a}]}},{id:i,count:l,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:e,href:f,templated:a}]}},{id:r,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:e,href:f,templated:a}]}},{id:l,count:40,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:e,href:f,templated:a}]}},{id:7,count:s,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:e,href:f,templated:a}]}},{id:8,count:r,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:e,href:f,templated:a}]}},{id:s,count:p,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:e,href:f,templated:a}]}},{id:k,count:b,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:e,href:f,templated:a}]}}]}}},mutations:void 0}}(true,0,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",4,false,1,6,"2020-09-22T23:06:28","2020-09-22T14:06:28","open",3,"gulp",5,9)));