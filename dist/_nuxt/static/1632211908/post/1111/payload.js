__NUXT_JSONP__("/post/1111", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {data:[{post:{id:1111,date:m,date_gmt:n,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1111"},modified:m,modified_gmt:n,slug:"javascriptmoden",status:"publish",type:"post",link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F01\u002F01\u002Fjavascriptmoden\u002F",title:{rendered:"「JavaScriptモダンプログラミング完全ガイド　堅牢なコードを効率的に開発できる！」を買った"},content:{rendered:"\n\u003Cp\u003E先日発売された「JavaScriptモダンプログラミング完全ガイド　堅牢なコードを効率的に開発できる！」を買いましたので、自分用のメモと感想など。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E第一章「値と変数」\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E型について、オブジェクトについての説明がある。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Elet pikachu = { name : 'ピカチュウ', hp : 100};\n\u002F\u002F 分割を使うと、配列やオブジェクトの中身を簡単に取り出せる\nlet {name , hp} = pikachu\nconsole.log(`${name}　：　${hp}`) \u002F\u002F \"ピカチュウ　：　100\"\nconsole.log(typeof pikachu) \u002F\u002F \"object\"\n\u002F\u002F nullはobjectではないが、typeofを使うとobjectという文字列が帰ってくる。\nconsole.log(typeof null) \u002F\u002F \"object\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E名前を変えてオブジェクトから取り出したい場合\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Elet { name : metamonname, hp : metamonhp} = pikachu\nconsole.log(`${metamonname}　：　${metamonhp}`);\n\u002F\u002F \"ピカチュウ　：　100\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Erest演算子でオブジェクトを分割する。その他要素がオブジェクトになる。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Elet pikachu = { name : 'ピカチュウ', hp : 100};\nlet{name ,...otherProp} = pikachu\nconsole.log(otherProp)\n\u002F* ---------------------\n&#91;object Object] {\n  hp: 100\n}\n-----------------------*\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eその他配列のおもろい動き\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Elet array = &#91;1,2,3,&#91;4,5,6]];\nconsole.log(array&#91;3]);\n\u002F\u002F配列の中の配列も文字列化される\nconsole.log(array.join())\n\u002F\u002F要素がない場合はundefined\nconsole.log(array&#91;4.5])\n\u002F\u002F こんなこともできる\narray&#91;4.5] = \"小数点を番号にする\";\nconsole.log(array&#91;4.5]);\n------------------------------\n&#91;4, 5, 6]\n\"1,2,3,4,5,6\"\nundefined\n\"小数点を番号にする\"\n&#91;1, 2, 3, &#91;4, 5, 6]]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E第二章「制御構造」\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eプログラミングであるあるの制御構文などの説明メイン。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E比較には===を使って型も含めて厳密に比較する。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E比較時の型変換にに注意する\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Elet amount = '100';\nif(amount &gt; 50){ \u002F\u002F '100'が数値に変換される\n  console.log(\"success\");\n}else{\n  console.log(\"error\");\n}\n\u002F\u002F \"success\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E第三章「関数と関数型プログラミング」\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E通常の関数、無名関数、高階関数、ラムダ、クロージャ、スプレッド演算子、ホイスティング、例外の説明。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eクロージャはprivateな仕組みを作ったり堅いオブジェクト。\u003Cbr \u002F\u003E関数の中で宣言した変数は、外部からアクセスできない特別な環境が作られる。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EPHPにもクロージャがあったけど、無名関数のことをクロージャみたいに言ってる記述を見たことがあるけど、あれって合ってるのかな？\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst character = () =&gt; {\n  let hp = 100;\n  return {\n    damege : (val) =&gt; {\n      hp -= val;\n    },\n    add : (val) =&gt; {\n      hp += val;\n    },\n    showState : () =&gt; {\n      console.log(hp);\n    }\n  }\n}\nconst character = () =&gt; {\n  let hp = 100;\n  return {\n    damege : (val) =&gt; {\n      hp -= val;\n    },\n    add : (val) =&gt; {\n      hp += val;\n    },\n    showState : () =&gt; {\n      console.log(hp);\n    }\n  }\n}\nconst takashi = character();\nconsole.log(takashi.hp); \u002F\u002F直接アクセスできない\n--------------------\nundefined\nconsole.log(takashi.showState());\n\u002F\u002F 100\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E\u003Cbr \u002F\u003E直接hpにはアクセスできないが、関数から返された関数から（内部）はアクセスできる。\u003Cbr \u002F\u003Eこれを使ってprivateなメソッドも作成できる。\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003Eホイスティングとは\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econsole.log(hoge);\nconsole.log(fuga);\nvar hoge;\nlet fuga;\n---------------\nundefined\n\"error\"\n\"ReferenceError: Cannot access 'fuga' before initialization\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Evarで宣言した場合は宣言箇所より前で宣言されることになるので、undefinedになる。\u003Cbr \u002F\u003Eこれを防ぐには\u003C\u002Fp\u003E\n\n\n\u003Cul\u003E\u003Cli\u003Evarを使わない\u003C\u002Fli\u003E\u003Cli\u003Estrictモードを使う\u003C\u002Fli\u003E\u003Cli\u003E宣言箇所を使用箇所より前にする\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\n\n\u003Cp\u003E昔の書き方では無名関数を定義してすぐに実行するということをやっていた。これは全ての変数をローカルスコープとして定義するため。（宣言のカプセル化）\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F\u002F 昔流 jQueryなどもこれで書かれていた。\n(function(){\n  var localValue = \"ローカル\";\n})();\nconsole.log(localValue); \u002F\u002F not defined\n\u002F\u002F 今流\n{\n  let _localValue = \"ローキャル\";\n}\nconsole.log(_localValue); \u002F\u002F not defined\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E第四章「オブジェクト指向プログラミング」\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EJavaScriptのclassはJavaなどのclassとは根底が違う。\u003Cbr \u002F\u003Eそもそもプロトタイプについては知らないことが多かった。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eオブジェクトを作成するときに同じ関数は、プロトタイプを設定すると全てのオブジェクトで１つの関数を共用できる。\u003Cbr \u002F\u003Eこのプロトタイプは、内部スロット(internal slot)となり、プログラマ視点では操作できず、内部的に操作されるオブジェクト属性となる。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst commonProp = {\n  sayHello(){\n    console.log(`こんにちは${this.name}です。性別は${this.gender}です。`);\n  }\n}\nfunction createUser(name,gender){\n  \u002F\u002F オブジェクトを返す\n  const user = {\n    name : name,\n    gender, \u002F\u002Fこんな書き方もできますね\n    \u002F\u002F ここを共通化する。\n    \u002F*\n    sayHello : function() {\n      console.log(`こんにちは${name}です。`);\n    }\n    *\u002F\n  }\n  \u002F\u002F プロトタイプを設定する\n  Object.setPrototypeOf(user,commonProp);\n  return user;\n}\nconst takashi = createUser(\"たかし\",\"男\");\nconst kosei = createUser(\"こうせい\",\"男\");\ntakashi.sayHello();\nkosei.sayHello();\n--------------------\n\"こんにちはたかしです。性別は男です。\"\n\"こんにちはこうせいです。性別は男です。\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EtakashiのオブジェクトでsayHelloがないのでプロトタイプで検索される、これが見つかるまで深く探される（プロトタイプチェーン)Javaで言えば継承みたいな感じ？\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eオブジェクトを生成するのにオブジェクトを返却する関数を書いていたが、これをnewで行うことができる。クラスに使うものではなくオブジェクトの生成に使う。コンストラクタ関数です。コンストラクタ関数にプロトタイプも設定できます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F\u002F コンストラクタ\nfunction Human(name){\n  this.name = name;\n}\n\u002F\u002Fプロトタイプの設定\nHuman.prototype.greet = function(){\n  console.log(`私の名前は、${this.name} です。`);\n}\n\u002F\u002Fオブジェクトの生成\nconst takashi = new Human(\"たかし\");\ntakashi.greet(); \u002F\u002F \"私の名前は、たかし です。\"\nconst kosei = new Human(\"こうせい\");\nkosei.greet(); \u002F\u002F \"私の名前は、こうせい です。\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EJavaScriptのクラスは上記のコンストラクタ関数が根底にある。つまり他のオブジェクト指向言語とは違う。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eclass構文を使うサンプル\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F\u002F サブクラスも継承できる思想としてはプロトタイプチェーン\nclass Human{\n  \u002F\u002F コンストラクタ\n  constructor(name,age){\n    this.name = name;\n    this.age = age;\n  }\n  \u002F\u002Fプロトタイプ\n  greet(){\n    console.log(`私は${this.name}と申す。年は${this.age}でござる。`);\n  }\n  \u002F\u002F ゲッター。メソッドをプロパティのようにアクセスが可能。\n  get humanProp(){\n    return `${this.name}.${this.age}`;\n  }\n}\nconst takashi = new Human(\"たかし\",15);\ntakashi.greet(); \u002F\u002F 私はたかしと申す。年は15でござる。\nconsole.log(takashi.humanProp); \u002F\u002F たかし.15\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eまたthisについての説明。\u003Cbr \u002F\u003Ejsの場合はthisのクセが強い。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E例えばコールバック関数の中で、その外側の変数にアクセスしようとするとundefinedになる。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst customer = {\n  anc : \"様\",\n  customers : &#91;\"飯田\",\"吉野\",\"山岸\",\"新山\"],\n  showCustomers(){\n    this.customers.forEach(function(customer){\n      console.log(`${customer}${this.anc}`);\n    });\n  }\n}\ncustomer.showCustomers();\n\u002F\u002F thisはundefined\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eラムダを使うことでthisを束縛できます。用語はさておき、thisを使っても外側の変数にアクセスできることが確認できます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst customer = {\n  anc : \"様\",\n  customers : &#91;\"飯田\",\"吉野\",\"山岸\",\"新山\"],\n  showCustomers(){\n    this.customers.forEach((customer) =&gt; {\n      console.log(`${customer}${this.anc}`);\n    });\n  }\n}\ncustomer.showCustomers();\n\u002F\u002F \"飯田様\" \"吉野様\" \"山岸様\" \"新山様\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E続きはまた今度。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E説明は簡潔ですが、ゆえにわかりやすい。\u003Cbr \u002F\u003Eこれからプログラミング言語を始めようって人には向いていない。\u003C\u002Fp\u003E\n",protected:j},excerpt:{rendered:"\u003Cp\u003E先日発売された「JavaScriptモダンプログラミング完全ガイド　堅牢なコードを効率的に開発できる！」を買いましたので、自分用のメモと感想など。 第一章「値と変数」 型について、オブジェクトについての説明がある。 名前&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F01\u002F01\u002Fjavascriptmoden\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E「JavaScriptモダンプログラミング完全ガイド　堅牢なコードを効率的に開発できる！」を買った\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:j},author:k,featured_media:1200,comment_status:o,ping_status:o,sticky:j,template:c,format:"standard",meta:[],categories:[l],tags:[34,70],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1111"}],collection:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1111"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1111\u002Frevisions"}],"wp:featuredmedia":[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia\u002F1200"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1111"}],"wp:term":[{taxonomy:d,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1111"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1111"}],curies:[{name:e,href:f,templated:a}]}}}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:e,href:f,templated:a}]}},{id:p,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:e,href:f,templated:a}]}},{id:77,count:k,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fgulp\u002F",name:q,slug:q,taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F77"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=77"}],curies:[{name:e,href:f,templated:a}]}},{id:i,count:r,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:e,href:f,templated:a}]}},{id:l,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:e,href:f,templated:a}]}},{id:r,count:40,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:e,href:f,templated:a}]}},{id:7,count:s,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:e,href:f,templated:a}]}},{id:8,count:l,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:e,href:f,templated:a}]}},{id:s,count:p,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:e,href:f,templated:a}]}},{id:k,count:b,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:e,href:f,templated:a}]}}]}}},mutations:void 0}}(true,0,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",4,false,1,5,"2021-01-01T22:30:17","2021-01-01T13:30:17","open",3,"gulp",6,9)));