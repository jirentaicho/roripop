__NUXT_JSONP__("/categories/4", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N){return {data:[{posts:{post:[{id:1401,date:v,date_gmt:w,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1401"},modified:v,modified_gmt:w,slug:"java%e3%81%ab%e3%82%88%e3%82%8b%e9%96%a2%e6%95%b0%e5%9e%8b%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F07\u002F04\u002Fjava%e3%81%ab%e3%82%88%e3%82%8b%e9%96%a2%e6%95%b0%e5%9e%8b%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0\u002F",title:{rendered:"Javaによる関数型プログラミング"},content:{rendered:"\n\u003Cp\u003Eって本が気に入ってます。2014年の本ですけどとても使えると思います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Famzn.to\u002F3wcN8cZ\" data-type=\"URL\" data-id=\"https:\u002F\u002Famzn.to\u002F3wcN8cZ\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EJavaによる関数型プログラミング ―Java 8ラムダ式とStream\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこの前BookOffで売ってたので買いました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EJavaのstreamでスッキリとしたコードが書けます。とりあえず普通のコードをどんどん綺麗なコードに変えていくような記載になっているので、わかりやすいどす。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまずは簡単な挨拶でリストのソートをやってみます。\u003Cbr \u002F\u003E文字列の長さでソートしてみます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\n\tpublic static void main(String&#91;] args) {\n\t\tList&lt;String&gt; people = Arrays.asList(\n\t\t\t\t\"suzukazeaoba\",\"yagamikoh\",\"nene\",\"takimotohihumi\");\n\t\tList&lt;String&gt; sortList = people.stream()\n\t\t\t\t.sorted((str1,str2) -&gt; str1.length() - str2.length())\n\t\t\t\t.collect(Collectors.toList());\n\t\tsortList.forEach(System.out::println);\n\t}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Enene\nyagamikoh\nsuzukazeaoba\ntakimotohihumi\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eループを２個作る必要もないシンプルなところに惚れてしまいますね。\u003Cbr \u002F\u003Eこんな感じでstreamを使うと&#8221;何をするのか&#8221;が明確になります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこの場合だと、このコードはソートをしてるんだなってのが一目でわかります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eもちろん、こんな何にもならないコードをずらずらと紹介しているだけでなく、例えばデザインパターンを関数型で書いてみるとか、ロック処理、例外、遅延など様々なtipsがあり、最後は関数型といえばというような内容で、再帰とか関数合成など書いてあります。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EStrategyパターンを関数型で作る\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EStrategyパターンといえば共通のインターフェースを用意して処理を切り替えることができるパターンです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eラムダ式を使うことで、関数を渡して処理を切り替えられるようになります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EこんなProductクラスがあります。和菓子洋菓子と商品名、価格を持っています。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epublic class Product {\n\t\u002F\u002F publicにしてます\n\tpublic enum Category {WA,YOU};\n\tpublic Category category;\n\tpublic String name;\n\tpublic int price;\n\tpublic Product(Category category,String name,int price) {\n\t\tthis.category = category;\n\t\tthis.name = name;\n\t\tthis.price = price;\n\t}\n\tpublic int getPrice() {\n\t\treturn this.price;\n\t}\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E値段の全カテゴリー合計、カテゴリーごとの合計を関数を入れ替えて取得できるようなメソッドを用意します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EPredicateにはbooleanを戻り値とするような関数を指定してあげます。\u003Cbr \u002F\u003E\u003Ca href=\"https:\u002F\u002Fdocs.oracle.com\u002Fjavase\u002Fjp\u002F8\u002Fdocs\u002Fapi\u002Fjava\u002Futil\u002Ffunction\u002FPredicate.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehttps:\u002F\u002Fdocs.oracle.com\u002Fjavase\u002Fjp\u002F8\u002Fdocs\u002Fapi\u002Fjava\u002Futil\u002Ffunction\u002FPredicate.html\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\tpublic static int getTotalAmt(final List&lt;Product\u003E products,final Predicate&lt;Product\u003E selectFunc) {\n\t\treturn products.stream()\n\t\t\t\t.filter(selectFunc)\n\t\t\t\t.mapToInt(Product::getPrice)\n\t\t\t\t.sum();\n\t\t\u002F\u002F 和の場合、洋の場合、ケースが増えると肥大化する\n\t\t\u002F\u002Freturn products.stream().mapToInt(Product::getPrice).sum();\n\t}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E実際に関数の指定で処理を切り替えます\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\tpublic static void main(String&#91;] args) {\n\t\tList&lt;Product\u003E products = Arrays.asList(\n\t\t\t\tnew Product(Category.WA,\"どら焼き\", 230),\n\t\t\t\tnew Product(Category.WA, \"大福\", 150),\n\t\t\t\tnew Product(Category.WA, \"最中\", 100),\n\t\t\t\tnew Product(Category.YOU, \"ショートケーキ\", 430),\n\t\t\t\tnew Product(Category.YOU, \"マドレーヌ\", 130),\n\t\t\t\tnew Product(Category.YOU, \"クッキー\", 100),\n\t\t\t\tnew Product(Category.YOU, \"シュークリーム\", 180)\n\t\t\t\t);\n\t\tint waSum = getTotalAmt(products,product -\u003E product.category == Category.WA);\n\t\tSystem.out.println(waSum);\n\t\tint youSum = getTotalAmt(products,product -\u003E product.category == Category.YOU);\n\t\tSystem.out.println(youSum);\n\t\tint sum = getTotalAmt(products,product -\u003E true);\n\t\tSystem.out.println(sum);\n\t}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E結果\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E480\n840\n1320\r\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E処理の委譲\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eある関心事を他のクラスに委譲することなどはよくあります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E合計された値が不正ではないか調べるようなバリデーションを実行する処理を関数に委譲します。ここでは簡単なバリデーションのみ行います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eでは、合計の値に不正がなければ登録、不正があれば登録失敗のような関数を作りました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\tpublic static void register(int sum,Function&lt;Integer, Boolean\u003E validationLogic) {\n\t\t\u002F\u002F なんか処理\n\t\t\u002F\u002Fバリデーション処理を委譲する\n\t\tif(!validationLogic.apply(sum)) {\n\t\t\t\u002F\u002F なんか処理\n\t\t\tSystem.out.println(\"エラーがありました\");\n\t\t\treturn;\n\t\t}\n\t\t\u002F\u002F なんか処理\n\t\tSystem.out.println(\"登録しました。\");\n\t}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EここでのFunctionはIntegerを受け取りBooleanを返します。\u003Cbr \u002F\u003Eこの関数を利用します。実際のバリデーション処理は関数に委譲します。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\n\tpublic static void main(String&#91;] args) {\n\t\tList&lt;Product\u003E products = Arrays.asList(\n\t\t\t\tnew Product(Category.WA,\"どら焼き\", 230),\n\t\t\t\tnew Product(Category.WA, \"大福\", 150),\n\t\t\t\tnew Product(Category.WA, \"最中\", 100),\n\t\t\t\tnew Product(Category.YOU, \"ショートケーキ\", 430),\n\t\t\t\tnew Product(Category.YOU, \"マドレーヌ\", 130),\n\t\t\t\tnew Product(Category.YOU, \"クッキー\", 100),\n\t\t\t\tnew Product(Category.YOU, \"シュークリーム\", 180)\n\t\t\t\t);\n\t\tint sum = getTotalAmt(products,product -\u003E true);\n\t\tSystem.out.println(sum);\n\t\t\u002F\u002F登録成功\n\t\tregister(sum, price -\u003E price \u003E 0);\n\t\t\u002F\u002F登録失敗\n\t\tregister(sum, price -\u003E price &lt; 0);\n\t}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eマイナス値の時は登録しっぱいになります。このバリデーションロジックをラムダ式を使って関数に委譲しています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E※よくあるのは複数のバリデーションをまとめたリストを適用させたりしますが、今回はバリデーションのロジックが１つの想定です。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003Eって本が気に入ってます。2014年の本ですけどとても使えると思います。 Javaによる関数型プログラミング ―Java 8ラムダ式とStream この前BookOffで売ってたので買いました。 Javaのstreamでス&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F07\u002F04\u002Fjava%e3%81%ab%e3%82%88%e3%82%8b%e9%96%a2%e6%95%b0%e5%9e%8b%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EJavaによる関数型プログラミング\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[i],tags:[71,75],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1401"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1401"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1401\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1401"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1401"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1401"}],curies:[{name:f,href:g,templated:a}]}},{id:1369,date:x,date_gmt:y,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1369"},modified:x,modified_gmt:y,slug:"1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90\u002F",title:{rendered:"1人Spring勉強会 Springでのクラス作成"},content:{rendered:"\n\u003Cp\u003E今回はプロジェクトの整理を行います。\u003Cbr \u002F\u003E正直Springがどういう構成でやるのがベストなのか知らないので、あくまで個人的な記載方法になります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003ESpringは素人なんでかなりパワー系かもしれないですが、結果的に動くものは作れます。\u003Cbr \u002F\u003Eパッケージはソース全文載せているので参考にしていただければと思います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Elombokを使うために、pom.xmlを修正します。\u003Cbr \u002F\u003Elombokを使うと面倒なアクセサメソッドを書かなくて良いので便利です。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;\u002FartifactId&gt;\n    &lt;\u002Fdependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;\u002FartifactId&gt;\n        &lt;scope&gt;test&lt;\u002Fscope&gt;\n    &lt;\u002Fdependency&gt;\n    &lt;!-- 追加 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;lombok&lt;\u002FartifactId&gt;\n        &lt;version&gt;1.18.8&lt;\u002Fversion&gt;\n        &lt;scope&gt;provided&lt;\u002Fscope&gt;\n    &lt;\u002Fdependency&gt;\n&lt;\u002Fdependencies&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EEntityの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EEntityは振る舞いを持たせません。ただのテーブルのレコードに該当する。そんなイメージです。\u003Cbr \u002F\u003E基本的にはDaoからアクセスされて、モデルに変換される使い方をよくします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EEntityのオブジェクトをロジッククラスに渡すことはしません。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.entity;\nimport java.util.Date;\nimport lombok.Data;\n\u002F\u002FDataではgetter setter以外にも追加されるので、使用する際は注意\n@Data\npublic class UserEntity {\n\tprivate String user_id;\n\tprivate String password;\n\tprivate Date insert_date;\n\tprivate Date update_date;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EDaoの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eテーブル名と紐づくようなクラス名にしておくのが良いです。\u003Cbr \u002F\u003EJirenDao.javaを作成します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EDaoはデータベースへのアクセスを記載するクラスになります。\u003Cbr \u002F\u003Eエンティティを取得しますが、モデルの作成のような処理は記載しないのが良いと思っています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eつまり、あくまでデータアクセスを行うクラスなので、ロジックのようなものを記載することはしません。（自分は）\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper;\npackage com.example.demo.domain.dao;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.mapper.UserMapper;\n@Repository\npublic class JirenDao {\n\t\u002F\u002Fこのアノテーションでインジェクションされます。\n\t\u002F\u002Fデータベースを扱うためのクラスです。\n\t@Autowired\n\tprivate JdbcTemplate jdbcTemplate;\n\t@Autowired\n\tprivate UserMapper userMapper;\n\t\u002F**\n\t * \t&lt;P&gt;\n\t * 全てのユーザーを取得します。\n\t * &lt;\u002Fp&gt;\n\t *\n\t * @return {@link UserEntity}情報のリスト\n\t *\u002F\n\tpublic List&lt;UserEntity&gt; getAll(){\n\t\tString sql = \"select * from users\";\n\t\t\u002F\u002F 独自のmapperを用意せずにListとMapで受け取る。\n\t\t\u002F\u002F 独自のmapperを利用すれば戻り値を変更できそうです。\n\t\tList&lt;Map&lt;String,Object&gt;&gt; results = jdbcTemplate.queryForList(sql);\n\t\treturn results.stream().map(userMapper::toUserEntity).collect(Collectors.toList());\n\t\t\u002F\u002F　以下と同じことやってます。\n\t\t\u002F*\n\t\treturn results.stream().map(result -&gt; {\n\t\t\tUserEntity entity = new UserEntity();\n\t\t\tentity.setUser_id((String)result.get(\"user_id\"));\n\t\t\tentity.setPassword((String)result.get(\"password\"));\n\t\t\tentity.setInsert_date((Timestamp)result.get(\"insert_date\"));\n\t\t\tentity.setUpdate_date((Timestamp)result.get(\"update_date\"));\n\t\t\treturn entity;\n\t\t}).collect(Collectors.toList());\n\t\t*\u002F\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EjdbcTemplate.queryForListの戻り値はList&lt;Map&lt;String,Object&gt;&gt;になります。queryを使うともっとシンプルに書けそうですが、今回はListで受け取って用意したマッパークラスで変換して返すようにします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EUserMapperインターフェースの作成\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper;\nimport java.util.Map;\nimport com.example.demo.domain.entity.UserEntity;\n\u002F**\n *\n * ユーザーエンティティのマッパーインターフェースです。\n *\n * @author jiren\n *\n *\u002F\npublic interface UserMapper {\n\tUserEntity toUserEntity(Map&lt;String,Object&gt; map);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EUserMapper実装クラスの作成\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E@componentアノテーションをつけて、@Autowiredでインジェクトできるようにしました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper.impl;\nimport java.sql.Timestamp;\nimport java.util.Map;\nimport org.springframework.stereotype.Component;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.mapper.UserMapper;\n@Component\npublic class UserMapperImpl implements UserMapper{\n\t\u002F**\n\t * {@inheritDoc}\n\t *\u002F\n\t@Override\n\tpublic UserEntity toUserEntity(Map&lt;String, Object&gt; map) {\n\t\tUserEntity entity = new UserEntity();\n\t\tentity.setUser_id((String)map.get(\"user_id\"));\n\t\tentity.setPassword((String)map.get(\"password\"));\n\t\tentity.setInsert_date((Timestamp)map.get(\"insert_date\"));\n\t\tentity.setUpdate_date((Timestamp)map.get(\"update_date\"));\n\t\treturn entity;\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EModelの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E私はモデルというと、業務上のモデルに該当する概念と同じ振る舞いなどが定義されているものとして使っています。\u003Cbr \u002F\u003Eもし共通のもがあればインターフェースも作りますが、今回はシンプルなのでインターフェースを作らずクラスのみ作ります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E振る舞いといっても、現状作ろうとしているモデルに振る舞いはないので定義しないですが、例えばブログの投稿モデルだったらコメントを持ってるよねーとか。そう考えると、ビジネスロジックで必要なのはエンティティでなくてモデルなので、エンティティをモデルにしています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eドメインモデルっていうのか？感覚でやりすぎてて整理しないとだめだと・・・\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.model;\nimport lombok.Getter;\nimport lombok.Setter;\n\u002F**\n * ユーザーのモデルです。\n *\n * @author jiren\n *\n *\u002F\n@Getter\n@Setter\npublic class User {\n\tprivate String user_id;\n\tprivate String password;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eコントローラーの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eコントローラーはリクエストに対して呼び出す処理を定義します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fjiren\u002Falluserにアクセスしたときに、データベースのレコードを取得して画面に表示するようにします。\u003Cbr \u002F\u003E\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.application.jiren.controller;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport com.example.demo.domain.logic.JirenLogic;\nimport com.example.demo.domain.model.User;\n@Controller\n@RequestMapping(\"\u002Fjiren\")\npublic class JirenController {\n\t@Autowired\n\tprivate JirenLogic jirenLogic;\n\t\u002F**\n\t * &lt;P&gt;\n\t * 全ユーザー情報を元にhtmlファイルを返却します。&lt;br \u002F&gt;\n\t * 返却される文字列はhtmlを除いたファイル名になります\n\t * &lt;\u002FP&gt;\n\t *\n\t * @param model model\n\t * @return String ViewFileName\n\t *\u002F\n\t@GetMapping(\"\u002Falluser\")\n\tpublic String getAllUser(Model model){\n\t\tList&lt;User&gt; users = jirenLogic.getAll();\n\t\tmodel.addAttribute(\"users\",users);\n\t\treturn \"alluser\";\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E引数のモデルにaddAttributeという形でUserモデルを設定しています。こうすることでUserモデルの情報をビューに表示できます。\u003Cbr \u002F\u003Eまた、returnしている文字列はhtmlファイルの名前になります。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eサービスクラスの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eクラス名がおかしいかもしれません。サービスクラスになります。最初サービスクラスってのを意識しないで作ってておかしなことになりました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eなんか作っててここも理解が浅いなってなりました。。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eインターフェースです\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.logic;\nimport java.util.List;\nimport com.example.demo.domain.model.User;\npublic interface JirenLogic {\n\t\u002F**\n\t * \t&lt;P&gt;\n\t * 全てのユーザーのモデルを取得します。\n\t * &lt;\u002FP&gt;\n\t * @return {@link User}のリスト\n\t *\u002F\n\tpublic List&lt;User&gt; getAll();\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E実装クラスです\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\npackage com.example.demo.domain.logic.impl;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport javax.annotation.Resource;\nimport org.springframework.stereotype.Service;\nimport com.example.demo.domain.dao.JirenDao;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.logic.JirenLogic;\nimport com.example.demo.domain.model.User;\n@Service\npublic class JirenLogicImpl implements JirenLogic{\n\t@Resource\n\tJirenDao jirendao;\n\t\u002F**\n\t * {@inheritDoc}\n\t *\u002F\n\tpublic List&lt;User&gt; getAll(){\n\t\tList&lt;UserEntity&gt; users = jirendao.getAll();\n\t\t\u002F\u002Fモデルにして返却します。\n\t\treturn users.stream().map(user -&gt; {\n\t\t\tUser model = new User();\n\t\t\tmodel.setUser_id(user.getUser_id());\n\t\t\tmodel.setPassword(user.getPassword());\n\t\t\treturn model;\n\t\t}).collect(Collectors.toList());\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Edaoを利用してエンティティを取得します。取得したエンティティをモデルにして返します。\u003Cbr \u002F\u003Eエンティティの時と同じようにマッパークラスを用意してもいいですが、簡素なものなのでその場で変換しています。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EViewの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Ethymeleafを使うとhtmlにロジックを組んだり、変数を使うことができます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Esource\u002Fmain\u002Fresources\u002Ftemplatesにalluser.htmlを作成します。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http:\u002F\u002Fwww.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;hello world&lt;\u002Ftitle&gt;\n&lt;\u002Fhead&gt;\n&lt;body&gt;\n&lt;p&gt;My Name is Jiren Tokkou Taichou!&lt;\u002Fp&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th colspan=\"2\"&gt;ユーザー情報&lt;\u002Fth&gt;\n        &lt;\u002Ftr&gt;\n    &lt;\u002Fthead&gt;\n    &lt;tbody　th:each=\"user : ${users}\"&gt;\n        &lt;tr&gt;\n            &lt;td　th:text=\"${user.user_id}\"&gt;id&lt;\u002Ftd&gt;\n            &lt;td　th:text=\"${user.password}\"&gt;password&lt;\u002Ftd&gt;\n        &lt;\u002Ftr&gt;\n    &lt;\u002Ftbody&gt;\n&lt;\u002Ftable&gt;\n&lt;\u002Fbody&gt;\n&lt;\u002Fhtml&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Epomの修正\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Epostgre接続に必要なものや、thymeleafに必要なライブラリをpomに記載しておきます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\n\t\t&lt;dependency&gt;\n\t\t  &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t  &lt;artifactId&gt;spring-boot-starter-jdbc&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;postgresql&lt;\u002FartifactId&gt;\n            &lt;scope&gt;runtime&lt;\u002Fscope&gt;\n        &lt;\u002Fdependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\u002FartifactId&gt;\n        &lt;\u002Fdependency&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E確認\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fjiren\u002Falluser にアクセスします。\u003Cbr \u002F\u003EするとDBから取得した情報が表示されます。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large\"\u003E\u003Cimg src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2021\u002F06\u002Fimage-2.png\" alt=\"\" class=\"wp-image-1378\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003Eかなり飛ばし気味でしたが、Springを使ってpostgreからデータを取得して表示することができました。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eエラー\u003C\u002Fh2\u003E\n\n\n\u003Ch4\u003EViewがあーだこーだ言われる\u003C\u002Fh4\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&#91;2m2021-06-27 17:57:42.205&#91;0;39m &#91;31mERROR&#91;0;39m &#91;35m27980&#91;0;39m &#91;2m---&#91;0;39m &#91;2m&#91;nio-8080-exec-2]&#91;0;39m &#91;36mo.a.c.c.C.&#91;.&#91;.&#91;\u002F].&#91;dispatcherServlet]   &#91;0;39m &#91;2m:&#91;0;39m Servlet.service() for servlet &#91;dispatcherServlet] in context with path &#91;] threw exception &#91;Circular view path &#91;alluser]: would dispatch back to the current handler URL &#91;\u002Fjiren\u002Falluser] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)] with root cause\njavax.servlet.ServletException: Circular view path &#91;alluser]: would dispatch back to the current handler URL &#91;\u002Fjiren\u002Falluser] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)\n\t\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Epom.xmlの依存関係に以下を追記する\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\u002FartifactId&gt;\n        &lt;\u002Fdependency&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch4\u003Elombokのアクセサメソッドが定義されない\u003C\u002Fh4\u003E\n\n\n\u003Cp\u003ESpringToolSuite4.iniに以下を追記する\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E-vmarges -javaagent:lombok.jar\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E今回はプロジェクトの整理を行います。正直Springがどういう構成でやるのがベストなのか知らないので、あくまで個人的な記載方法になります。 Springは素人なんでかなりパワー系かもしれないですが、結果的に動くものは作れ&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E1人Spring勉強会 Springでのクラス作成\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[i],tags:[z],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1369"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1369"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1369\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1369"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1369"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1369"}],curies:[{name:f,href:g,templated:a}]}},{id:1353,date:A,date_gmt:B,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1353"},modified:A,modified_gmt:B,slug:"1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-postgre%e7%92%b0%e5%a2%83%e6%a7%8b%e7%af%89%e7%b7%a8",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-postgre%e7%92%b0%e5%a2%83%e6%a7%8b%e7%af%89%e7%b7%a8\u002F",title:{rendered:"1人Spring勉強会-Postgre環境構築編"},content:{rendered:"\n\u003Cp\u003E仕事ではJavaを使っています。\u003Cbr \u002F\u003Eでもフレームワークとかがレガシーな感じでよろしくなく、Springなんて使っていません。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eインフラとかは割と整っていて、JenkinsやらAWSやら使っていますが、私は全く関与していません。\u003Cbr \u002F\u003Eさらにいえば、開発環境もインフラ担当者が用意したdockerイメージのDBサーバーを使っています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E今回はDockerにDBサーバーを用意して、似たようなことを個人的にやってみようということで、やっていきます。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E今回やること\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EDockerでPostgre環境を作成します（参考サイト）\u003Cbr \u002F\u003ESpringプロジェクトを作成します\u003Cbr \u002F\u003ESpringにPostgreの接続設定を行います\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eデータベースの用意\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E参考サイトと同じようにPostgreの環境を用意します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca rel=\"noreferrer noopener\" href=\"https:\u002F\u002Fqiita.com\u002Fasylum\u002Fitems\u002F17e655d8369c19affbc3\" data-type=\"URL\" data-id=\"https:\u002F\u002Fqiita.com\u002Fasylum\u002Fitems\u002F17e655d8369c19affbc3\" target=\"_blank\"\u003EdockerでPostgreSQLのコンテナ作成と初期化\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eちなみにユーザーとデータベースをjirenに変更しました。レコードをいくつか追加しておきます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Ejiren=# insert into users values ('aoba','password');\nINSERT 0 1\njiren=# insert into users values ('hihumi','password');\nINSERT 0 1\njiren=# insert into users values ('yun','password');\nINSERT 0 1\njiren=# insert into users values ('hazime','password');\nINSERT 0 1\njiren=# select * from users;\n user_id | password | insert_date | update_date\n---------+----------+-------------+-------------\n 1       | jirem    |             |\n jiren   | password |             |\n aoba    | password |             |\n hihumi  | password |             |\n yun     | password |             |\n hazime  | password |             |\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EDocker メモ\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eエラー対応\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003EC:\\Users\\xxxx\\Documents\\dockers\\postgre&gt;docker exec -it dockerpostgres bash\nError response from daemon: Container 96b94bffb6561ea94703cfd3b846518672d171a0f52684c5b69138672b504155 is not running\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Evolumeを消したら治りました。理由はわからなかったです。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003EC:\\Users\\xxx\\Documents\\dockers\\postgre&gt;docker volume ls\nDRIVER    VOLUME NAME\nlocal     5eaccfccafb7a76c3651ba17ebf3f0c8977439f1a655735e2c363a219da58a64\nlocal     6a4d0ea50481971cf424e1f872489fe86aa046387312137ae5202efc37f4583e\nlocal     6af960660094a2f83ac81cdeba8793b71a858364d5e130f295f6631cfc11520b\nlocal     7b3c86ab5cf8cfa9e96071bd99d81a994277b9d08602522d4f57e4e95db13a66\nlocal     727b015a52acfe93b2d952febea8f1a2b301864517df70ba435bab62b6410813\nlocal     3808216d5c1f608d0117899ae3a313204cf000fc9195d22c72da403da9642978\nlocal     docker-laravel_mysql-volume\nlocal     postgre_jirenpostgredb\nlocal     wordpress_db-data\nlocal     wordpress_wp_db_data\nC:\\Users\\xxx\\Documents\\dockers\\postgre&gt;docker volume rm postgre_jirenpostgredb\npostgre_jirenpostgredb\nC:\\Users\\xxx\\Documents\\dockers\\postgre&gt;docker volume ls\nDRIVER    VOLUME NAME\nlocal     5eaccfccafb7a76c3651ba17ebf3f0c8977439f1a655735e2c363a219da58a64\nlocal     6a4d0ea50481971cf424e1f872489fe86aa046387312137ae5202efc37f4583e\nlocal     6af960660094a2f83ac81cdeba8793b71a858364d5e130f295f6631cfc11520b\nlocal     7b3c86ab5cf8cfa9e96071bd99d81a994277b9d08602522d4f57e4e95db13a66\nlocal     727b015a52acfe93b2d952febea8f1a2b301864517df70ba435bab62b6410813\nlocal     3808216d5c1f608d0117899ae3a313204cf000fc9195d22c72da403da9642978\nlocal     docker-laravel_mysql-volume\nlocal     wordpress_db-data\nlocal     wordpress_wp_db_data\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EPostgreメモ\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eデーターベース一覧\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\\l\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eユーザー一覧\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\\du\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003ESTSでSpringプロジェクトを作成する\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Estsを使ってSpringプロジェクトを作成します。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large\"\u003E\u003Cimg src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2021\u002F06\u002Fimage.png\" alt=\"\" class=\"wp-image-1355\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003E適当にwebにチェックを入れて\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large\"\u003E\u003Cimg src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2021\u002F06\u002Fimage-1.png\" alt=\"\" class=\"wp-image-1357\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003EこれでSpringプロジェクトができました。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eデータベースに接続する設定を行う\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E\u002Fsrc\u002Fmain\u002Fresources\u002Fapplication.propertiesに設定を記載します。\u003Cbr \u002F\u003E参考サイトで.envに記載した内容を書きます。私は少し変更したので以下のようになりました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Espring.datasource.driver-class-name=org.postgresql.Driver\nspring.datasource.url=jdbc:postgresql:\u002F\u002Flocalhost:5432\u002Fjiren\nspring.datasource.username=jiren\nspring.datasource.password=password\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E今回は、この辺にしておきます。\u003Cbr \u002F\u003E実際にデータアクセスを行うのに必要なものをそろえる必要があるため、次回はSpringのプロジェクトを整理していきます。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E仕事ではJavaを使っています。でもフレームワークとかがレガシーな感じでよろしくなく、Springなんて使っていません。 インフラとかは割と整っていて、JenkinsやらAWSやら使っていますが、私は全く関与していません&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-postgre%e7%92%b0%e5%a2%83%e6%a7%8b%e7%af%89%e7%b7%a8\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E1人Spring勉強会-Postgre環境構築編\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[t,i],tags:[43,z],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1353"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1353"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1353\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1353"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1353"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1353"}],curies:[{name:f,href:g,templated:a}]}},{id:1235,date:C,date_gmt:D,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1235"},modified:C,modified_gmt:D,slug:"%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7null%e3%81%a8optional",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F05\u002F%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7null%e3%81%a8optional\u002F",title:{rendered:"今更だがEffectiveJavaを買ったのでnullとOptional"},content:{rendered:"\n\u003Ch2\u003E項目54　nullではなく、空コレクションか空配列を返す\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EよくNullチェックを行うコードを見かけます。\u003Cbr \u002F\u003Eでも、そもそもNullを返却するようなメソッドは作らないようにしましょうというお話でした。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\npackage nullhadame;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Main {\n\tpublic static List&lt;String\u003E list;\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\tlist = new ArrayList&lt;String\u003E();\n\t\tlist = getList();\n\t\t\u002F\u002F TODO Auto-generated method stub\n\t\tif(list != null &amp;&amp; list.contains(\"涼風青葉\")){\n\t\t\tSystem.out.println(\"処理が完了しました\");\n\t\t}\n\t\tif(list == null){\n\t\t\tSystem.out.println(\"nullです\");\n\t\t}\n\t}\n\tpublic static List&lt;String\u003E getList(){\n\t\treturn list.isEmpty() ? null : new ArrayList&lt;\u003E(list);\n\t}\n}\r\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EこれはNullを返す可能性があるのでやめて、空のコレクションを返せば十分\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage nullhadame;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Main {\n\tpublic static List&lt;String\u003E list;\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\tlist = new ArrayList&lt;String\u003E();\n\t\tlist = getList();\n\t\tif(list.contains(\"涼風青葉\")){\n\t\t\tSystem.out.println(\"処理が完了しました\");\n\t\t}\n\t}\n\tpublic static List&lt;String\u003E getList(){\n\t\treturn new ArrayList&lt;\u003E(list);\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E項目55 オプショナルを注意して返す\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EなんとなくHaskell以外の言語といえばNullで死ぬと思っていましたが、JavaにはOptionalというものがあります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E仕事でも結構書きました。これがあると結果が無い場合があることがクライアントも理解できます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EOptional&lt;T\u003Eは、nullでないT参照を保持するか、何もない空(empty)を保持しているか。HaskellでいうMaybeのようなものですね。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage nullhadame;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\npublic class Main {\n\tpublic static List&lt;String\u003E list;\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\t\u002F\u002F orElseでデフォルト値を設定できる\n\t\tString name = getName().orElse(\"涼風青葉\");\n\t\tSystem.out.println(name);\n\t\tString name1 = getEmptyName().orElse(\"涼風青葉\");\n\t\tSystem.out.println(name1);\n\t\t\u002F\u002F 確定で値が取得できる場合はgetが付ける\n\t\tString name2 = getName().get();\n\t\tSystem.out.println(name2);\n\t\t\u002F\u002F値があればtrue\n\t\tboolean hasName = getName().isPresent();\n\t\tSystem.out.println(hasName);\n\t}\n\tpublic static Optional&lt;String\u003E getName(){\n\t\t\u002F\u002F nullでないT参照を返す\n\t\treturn Optional.of(\"桜ねね\");\n\t}\n\tpublic static Optional&lt;String\u003E getEmptyName(){\n\t\t\u002F\u002F 何もない空(empty)を返す\n\t\treturn Optional.empty();\n\t}\n\t\u002F\u002F こういうのはやめる（コレクションは空を返すだけ）\n\tpublic static Optional&lt;List&lt;String\u003E\u003E getList(){\n\t\treturn Optional.of(Arrays.asList(\"はじめ\",\"ひふみ\",\"ゆん\"));\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E桜ねね\u003Cbr \u002F\u003E涼風青葉\u003Cbr \u002F\u003E桜ねね\u003Cbr \u002F\u003Etrue\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eメモ\u003C\u002Fh2\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\t\tList&lt;String\u003E hoge = Arrays.asList(\"aoba\",\"hihumi\");\n\t\tOptional&lt;String\u003E aoba = hoge.stream().filter(i -\u003E i.equals(\"aoba\")).findFirst();\n\t\tSystem.out.println(aoba.orElse(\"青葉はいません\"));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EfindFirstはOptionalを返すので、こんな書き方になります。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E項目54　nullではなく、空コレクションか空配列を返す よくNullチェックを行うコードを見かけます。でも、そもそもNullを返却するようなメソッドは作らないようにしましょうというお話でした。 これはNullを返す可能&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F05\u002F%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7null%e3%81%a8optional\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E今更だがEffectiveJavaを買ったのでnullとOptional\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:1206,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[i],tags:[u,E,41],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1235"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1235"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1235\u002Frevisions"}],"wp:featuredmedia":[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia\u002F1206"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1235"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1235"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1235"}],curies:[{name:f,href:g,templated:a}]}},{id:1232,date:F,date_gmt:G,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1232"},modified:F,modified_gmt:G,slug:"1232",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F05\u002F1232\u002F",title:{rendered:"今更だがEffectiveJavaを買ったのでtoString"},content:{rendered:"\n\u003Cp\u003Eクラスとインターフェースとかジェネリックスとかは、読んで勉強してもあんまり納得いかないような感じがしたので、小さいtipsから手をつけてみます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E何かJavaで作りながら勉強しようと思います。（でもこれといって作りたいものがない。ＧＵＩアプリとか・・？）\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EというわけでEffective Javaを読んでいきます。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E項目12 toStringを常にオーバーライドする\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EtoStringの実装を提供して使いやすいクラスを目指そう。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E普通にtoStringメソッドを呼んでみると\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage objsikou;\npublic class Main {\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\t\u002F\u002F TODO Auto-generated method stub\n\t\tCompany ejump = new Company();\n\t\tSystem.out.println(ejump.toString());\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003Eobjsikou.Company@15db9742\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003Eなんだかよくわからない文字列が返ってきました。クラス名@ハッシュコードらしいです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EtoStringはオブジェクトに含まれる興味のある（重要な）内容がわかるようになるべき。ということですが、その戻り値の形式はクラスが広く使われるようになると変更ができなくなるので注意（電話番号や行列などの値クラスはいいかもしれない）\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eドキュメンテーションはしっかり記載すること\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage objsikou;\npublic class Company {\n\tprivate final String name;\n\tprivate final int no;\n\tpublic Company(String name,int no){\n\t\tthis.name = name;\n\t\tthis.no = no;\n\t}\n\tpublic String getName(){\n\t\treturn this.name;\n\t}\n\tpublic int getNo(){\n\t\treturn this.no;\n\t}\n\t\u002F**\n\t * 会社名とその企業番号を返します。\n\t * 形式は\"会社名=XXX 企業番号=YYY\"で構成されます。\n\t *\n\t * その他ほげほげ\n\t *\u002F\n\t@Override\n\tpublic String toString(){\n\t\treturn \"会社名=\" + this.name + \"企業番号=\" + this.no;\u002F\u002Fnoはintなので注意\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage objsikou;\npublic class Main {\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\t\u002F\u002F TODO Auto-generated method stub\n\t\tCompany ejump = new Company(\"イーグルジャンプ\",902);\n\t\tSystem.out.println(ejump.toString());\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E会社名=イーグルジャンプ企業番号=902\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003EtoStringでは重要な情報を取得できるようにすることと、出力形式にはルール決めが必要ということ。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003Eクラスとインターフェースとかジェネリックスとかは、読んで勉強してもあんまり納得いかないような感じがしたので、小さいtipsから手をつけてみます。 何かJavaで作りながら勉強しようと思います。（でもこれといって作りたいも&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F05\u002F1232\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E今更だがEffectiveJavaを買ったのでtoString\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:1200,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[i],tags:[u],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1232"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1232"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1232\u002Frevisions"}],"wp:featuredmedia":[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia\u002F1200"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1232"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1232"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1232"}],curies:[{name:f,href:g,templated:a}]}},{id:1215,date:H,date_gmt:I,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1215"},modified:H,modified_gmt:I,slug:"%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7%e3%83%93%e3%83%ab%e3%83%80%e3%83%bc%e3%83%91%e3%82%bf%e3%83%bc%e3%83%b3",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F04\u002F%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7%e3%83%93%e3%83%ab%e3%83%80%e3%83%bc%e3%83%91%e3%82%bf%e3%83%bc%e3%83%b3\u002F",title:{rendered:"今更だがEffectiveJavaを買ったのでビルダーパターン"},content:{rendered:"\n\u003Cp\u003EJavaも使えるようにしないといけないので、EffectiveJavaを今更ですが買いました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E私の日本語力が無いのか？なんか何言ってるかよくわからない箇所が多い気がしますが、、、\u003Cbr \u002F\u003Eつまみ読みしていこうかなと思います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eここに書いてあるソースはあくまで勉強用なのでご注意ください。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EBuilderパターンの利用\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eコンストラクタでの引数が多くなったときはビルダーパターンを利用すると読みやすいよって話。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E初めて聞いたけどテレスコーピングコンストラクタパターンというのがあるらしい。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage newgame;\npublic class HumanTelescoping {\n\tprivate final String name; \u002F\u002F 必須\n\tprivate final int age; \u002F\u002F 必須\n\tprivate final String hobby; \u002F\u002F option\n\tprivate final String nicname; \u002F\u002F option\n\t\u002F\u002F コンストラクタ\n\tpublic HumanTelescoping(String name,int age){\n\t\t\u002F\u002F　さらにコンストラクタを呼び出す\n\t\tthis(name,age,\"none\",\"none\");\n\t}\n\tpublic HumanTelescoping(String name,int age,String hobby,String nicname){\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.hobby = hobby;\n\t\tthis.nicname = nicname;\n\t}\n\tpublic String GetState(){\n\t\treturn \"name : \" + this.name + \" age : \" + this.age + \" hobby : \" + this.hobby + \" nicname : \" + this.nicname;\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage newgame;\npublic class Main {\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\t\u002F\u002F TODO Auto-generated method stub\n\t\tHumanTelescoping aoba = new HumanTelescoping(\"涼風青葉\", 18);\n\t\tSystem.out.println(aoba.GetState());\n\t\tHumanTelescoping koh = new HumanTelescoping(\"八神コウ\", 25 , \"イラスト\", \"パンツマン\");\n\t\tSystem.out.println(koh.GetState());\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Ename : 涼風青葉 age : 18 hobby : none nicname : none\u003Cbr \u002F\u003Ename : 八神コウ age : 25 hobby : イラスト nicname : パンツマン\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E引数に色々渡してるけど何の値？ってなるし構造も少し複雑。\u003C\u002Fp\u003E\n\n\n\u003Ch3\u003Eビルダーパターン\u003C\u002Fh3\u003E\n\n\n\u003Cp\u003Eさっそく作ってみます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage newgame;\npublic abstract class Human {\n\tpublic enum Type{ILUST,PROGRMMER,KIKAKU}\n\tpublic final Type type;\n\tpublic final String name;\n\tpublic final int age;\n\tpublic final String hobby;\n\tpublic final String nicname;\n\tabstract static class Builder&lt;T extends Builder&lt;T\u003E\u003E{\n\t\tprivate final Type type;\n\t\tprivate final String name;\n\t\tprivate final int age;\n\t\tprivate String hobby = \"none\";\n\t\tprivate String nicname = \"none\";\n\t\t\u002F**\n\t\t * 必須なんでコンストラクタで受け取ってみる\n\t\t * @param type\n\t\t * @param name\n\t\t * @param age\n\t\t *\u002F\n\t\tpublic Builder(Type type,String name,int age){\n\t\t\tthis.type = type;\n\t\t\tthis.name = name;\n\t\t\tthis.age = age;\n\t\t}\n\t\tpublic T setHobby(String hobby){\n\t\t\tthis.hobby = hobby;\n\t\t\treturn self();\n\t\t}\n\t\tpublic T setNicname(String nicname){\n\t\t\tthis.nicname = nicname;\n\t\t\treturn self();\n\t\t}\n\t\tpublic abstract Human build();\n\t\tpublic abstract T self();\n\t}\n\tHuman(Builder&lt;?\u003E builder){\n\t\tthis.name = builder.name;\n\t\tthis.age = builder.age;\n\t\tthis.hobby = builder.hobby;\n\t\tthis.nicname = builder.nicname;\n\t\tthis.type = builder.type;\n\t}\n\tpublic String getData(){\n\t\treturn this.name + this.age + this.hobby + this.nicname + this.type;\n\t}\n}\r\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage newgame;\npublic class IllustHuman extends Human {\n\tpublic enum Charge{CHARACTER,MOTION,BACK}\n\tprivate final Charge charge;\n\tpublic static class Builder extends Human.Builder&lt;Builder\u003E{\n\t\tprivate final Charge charge;\n\t\t\u002F\u002F なんかコンストラクタの引数が多くなったけど必須なんでいいや汗\n\t\tpublic Builder(Type type,String name,int age, Charge charge){\n\t\t\tsuper(type,name,age);\n\t\t\tthis.charge = charge;\n\t\t}\n\t\t@Override\n\t\tpublic IllustHuman build() {\n\t\t\t\u002F\u002F TODO Auto-generated method stub\n\t\t\treturn new IllustHuman(this);\n\t\t}\n\t\t@Override\n\t\tpublic Builder self() {\n\t\t\t\u002F\u002F TODO Auto-generated method stub\n\t\t\treturn this;\n\t\t}\n\t}\n\tIllustHuman(Builder builder) {\n\t\tsuper(builder);\n\t\tthis.charge = builder.charge;\n\t}\n\t@Override\n\tpublic String getData(){\n\t\treturn \"name : \" + this.name + \"age : \" + this.age + \"hobby : \" + this.hobby + \"nicname : \" + this.nicname + \"班　：　\" + this.type + \"チーム　：　\" + this.charge;\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage newgame;\nimport newgame.Human.Type;\nimport newgame.IllustHuman.Charge;\npublic class Main {\n\t\u002F**\n\t * @param args\n\t *\u002F\n\tpublic static void main(String&#91;] args) {\n\t\t\u002F\u002F TODO Auto-generated method stub\n\t\tHumanTelescoping aoba = new HumanTelescoping(\"涼風青葉\", 18);\n\t\tSystem.out.println(aoba.GetState());\n\t\tHumanTelescoping koh = new HumanTelescoping(\"八神コウ\", 25 , \"イラスト\", \"パンツマン\");\n\t\tSystem.out.println(koh.GetState());\n\t\t\u002F\u002F ボディービルダーパターンの利用\n\t\tIllustHuman yun = new IllustHuman.Builder(Type.ILUST, \"飯島ゆん\", 23, Charge.CHARACTER).setHobby(\"ファッション\").setNicname(\"ゆん\").build();\n\t\tSystem.out.println(yun.getData());\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Ename : 涼風青葉 age : 18 hobby : none nicname : none\u003Cbr \u002F\u003Ename : 八神コウ age : 25 hobby : イラスト nicname : パンツマン\u003Cbr \u002F\u003Ename : 飯島ゆんage : 23hobby : ファッションnicname : ゆん班　：　ILUSTチーム　：　CHARACTER\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eちょとわかりづらいかもしれませんが、ビルダーパターンではオプションをコンストラクタで渡すようなことはせず、メソッドを介して設定しているので、なんの値を設定しているのか見て判断できるようになっています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ereturn thisとして、疑似自分型イデオム（イデオンではない）と呼ばれる技法でこれを可能にしています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eオブジェクトの生成が一度で書かれているため、毎回setHoge()のようにするJavaBeansパターンの生成過程で起きるバグという欠点を解決しています。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003EJavaも使えるようにしないといけないので、EffectiveJavaを今更ですが買いました。 私の日本語力が無いのか？なんか何言ってるかよくわからない箇所が多い気がしますが、、、つまみ読みしていこうかなと思います。 こ&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F05\u002F04\u002F%e4%bb%8a%e6%9b%b4%e3%81%a0%e3%81%8ceffectivejava%e3%82%92%e8%b2%b7%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7%e3%83%93%e3%83%ab%e3%83%80%e3%83%bc%e3%83%91%e3%82%bf%e3%83%bc%e3%83%b3\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E今更だがEffectiveJavaを買ったのでビルダーパターン\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:l,featured_media:1219,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[i],tags:[u,69],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1215"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1215"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1215\u002Frevisions"}],"wp:featuredmedia":[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia\u002F1219"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1215"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1215"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1215"}],curies:[{name:f,href:g,templated:a}]}}]},categoryName:J}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:f,href:g,templated:a}]}},{id:t,count:i,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:f,href:g,templated:a}]}},{id:77,count:l,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fgulp\u002F",name:K,slug:K,taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F77"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=77"}],curies:[{name:f,href:g,templated:a}]}},{id:i,count:L,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:J,slug:"java",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:f,href:g,templated:a}]}},{id:M,count:i,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:f,href:g,templated:a}]}},{id:L,count:E,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:f,href:g,templated:a}]}},{id:7,count:N,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:f,href:g,templated:a}]}},{id:8,count:M,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:f,href:g,templated:a}]}},{id:N,count:t,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:f,href:g,templated:a}]}},{id:l,count:b,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:j}],about:[{href:k}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:f,href:g,templated:a}]}}]}}},mutations:void 0}}(true,0,false,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","open",4,"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",1,"publish","post","standard","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1","post_tag",3,24,"2021-07-04T23:00:02","2021-07-04T14:00:02","2021-06-28T00:27:55","2021-06-27T15:27:55",47,"2021-06-28T00:25:39","2021-06-27T15:25:39","2021-05-05T21:00:34","2021-05-05T12:00:34",40,"2021-05-05T17:23:52","2021-05-05T08:23:52","2021-05-04T15:49:36","2021-05-04T06:49:36","Java","gulp",6,5,9)));