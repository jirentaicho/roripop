__NUXT_JSONP__("/post/1369", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:[{post:{id:1369,date:k,date_gmt:l,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1369"},modified:k,modified_gmt:l,slug:"1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90",status:"publish",type:"post",link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90\u002F",title:{rendered:"1人Spring勉強会 Springでのクラス作成"},content:{rendered:"\n\u003Cp\u003E今回はプロジェクトの整理を行います。\u003Cbr \u002F\u003E正直Springがどういう構成でやるのがベストなのか知らないので、あくまで個人的な記載方法になります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003ESpringは素人なんでかなりパワー系かもしれないですが、結果的に動くものは作れます。\u003Cbr \u002F\u003Eパッケージはソース全文載せているので参考にしていただければと思います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Elombokを使うために、pom.xmlを修正します。\u003Cbr \u002F\u003Elombokを使うと面倒なアクセサメソッドを書かなくて良いので便利です。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;\u002FartifactId&gt;\n    &lt;\u002Fdependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;\u002FartifactId&gt;\n        &lt;scope&gt;test&lt;\u002Fscope&gt;\n    &lt;\u002Fdependency&gt;\n    &lt;!-- 追加 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;lombok&lt;\u002FartifactId&gt;\n        &lt;version&gt;1.18.8&lt;\u002Fversion&gt;\n        &lt;scope&gt;provided&lt;\u002Fscope&gt;\n    &lt;\u002Fdependency&gt;\n&lt;\u002Fdependencies&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EEntityの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EEntityは振る舞いを持たせません。ただのテーブルのレコードに該当する。そんなイメージです。\u003Cbr \u002F\u003E基本的にはDaoからアクセスされて、モデルに変換される使い方をよくします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EEntityのオブジェクトをロジッククラスに渡すことはしません。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.entity;\nimport java.util.Date;\nimport lombok.Data;\n\u002F\u002FDataではgetter setter以外にも追加されるので、使用する際は注意\n@Data\npublic class UserEntity {\n\tprivate String user_id;\n\tprivate String password;\n\tprivate Date insert_date;\n\tprivate Date update_date;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EDaoの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eテーブル名と紐づくようなクラス名にしておくのが良いです。\u003Cbr \u002F\u003EJirenDao.javaを作成します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EDaoはデータベースへのアクセスを記載するクラスになります。\u003Cbr \u002F\u003Eエンティティを取得しますが、モデルの作成のような処理は記載しないのが良いと思っています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eつまり、あくまでデータアクセスを行うクラスなので、ロジックのようなものを記載することはしません。（自分は）\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper;\npackage com.example.demo.domain.dao;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.mapper.UserMapper;\n@Repository\npublic class JirenDao {\n\t\u002F\u002Fこのアノテーションでインジェクションされます。\n\t\u002F\u002Fデータベースを扱うためのクラスです。\n\t@Autowired\n\tprivate JdbcTemplate jdbcTemplate;\n\t@Autowired\n\tprivate UserMapper userMapper;\n\t\u002F**\n\t * \t&lt;P&gt;\n\t * 全てのユーザーを取得します。\n\t * &lt;\u002Fp&gt;\n\t *\n\t * @return {@link UserEntity}情報のリスト\n\t *\u002F\n\tpublic List&lt;UserEntity&gt; getAll(){\n\t\tString sql = \"select * from users\";\n\t\t\u002F\u002F 独自のmapperを用意せずにListとMapで受け取る。\n\t\t\u002F\u002F 独自のmapperを利用すれば戻り値を変更できそうです。\n\t\tList&lt;Map&lt;String,Object&gt;&gt; results = jdbcTemplate.queryForList(sql);\n\t\treturn results.stream().map(userMapper::toUserEntity).collect(Collectors.toList());\n\t\t\u002F\u002F　以下と同じことやってます。\n\t\t\u002F*\n\t\treturn results.stream().map(result -&gt; {\n\t\t\tUserEntity entity = new UserEntity();\n\t\t\tentity.setUser_id((String)result.get(\"user_id\"));\n\t\t\tentity.setPassword((String)result.get(\"password\"));\n\t\t\tentity.setInsert_date((Timestamp)result.get(\"insert_date\"));\n\t\t\tentity.setUpdate_date((Timestamp)result.get(\"update_date\"));\n\t\t\treturn entity;\n\t\t}).collect(Collectors.toList());\n\t\t*\u002F\n\t}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EjdbcTemplate.queryForListの戻り値はList&lt;Map&lt;String,Object&gt;&gt;になります。queryを使うともっとシンプルに書けそうですが、今回はListで受け取って用意したマッパークラスで変換して返すようにします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EUserMapperインターフェースの作成\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper;\nimport java.util.Map;\nimport com.example.demo.domain.entity.UserEntity;\n\u002F**\n *\n * ユーザーエンティティのマッパーインターフェースです。\n *\n * @author jiren\n *\n *\u002F\npublic interface UserMapper {\n\tUserEntity toUserEntity(Map&lt;String,Object&gt; map);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EUserMapper実装クラスの作成\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E@componentアノテーションをつけて、@Autowiredでインジェクトできるようにしました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.mapper.impl;\nimport java.sql.Timestamp;\nimport java.util.Map;\nimport org.springframework.stereotype.Component;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.mapper.UserMapper;\n@Component\npublic class UserMapperImpl implements UserMapper{\n\t\u002F**\n\t * {@inheritDoc}\n\t *\u002F\n\t@Override\n\tpublic UserEntity toUserEntity(Map&lt;String, Object&gt; map) {\n\t\tUserEntity entity = new UserEntity();\n\t\tentity.setUser_id((String)map.get(\"user_id\"));\n\t\tentity.setPassword((String)map.get(\"password\"));\n\t\tentity.setInsert_date((Timestamp)map.get(\"insert_date\"));\n\t\tentity.setUpdate_date((Timestamp)map.get(\"update_date\"));\n\t\treturn entity;\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EModelの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E私はモデルというと、業務上のモデルに該当する概念と同じ振る舞いなどが定義されているものとして使っています。\u003Cbr \u002F\u003Eもし共通のもがあればインターフェースも作りますが、今回はシンプルなのでインターフェースを作らずクラスのみ作ります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E振る舞いといっても、現状作ろうとしているモデルに振る舞いはないので定義しないですが、例えばブログの投稿モデルだったらコメントを持ってるよねーとか。そう考えると、ビジネスロジックで必要なのはエンティティでなくてモデルなので、エンティティをモデルにしています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eドメインモデルっていうのか？感覚でやりすぎてて整理しないとだめだと・・・\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.model;\nimport lombok.Getter;\nimport lombok.Setter;\n\u002F**\n * ユーザーのモデルです。\n *\n * @author jiren\n *\n *\u002F\n@Getter\n@Setter\npublic class User {\n\tprivate String user_id;\n\tprivate String password;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eコントローラーの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eコントローラーはリクエストに対して呼び出す処理を定義します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fjiren\u002Falluserにアクセスしたときに、データベースのレコードを取得して画面に表示するようにします。\u003Cbr \u002F\u003E\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.application.jiren.controller;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport com.example.demo.domain.logic.JirenLogic;\nimport com.example.demo.domain.model.User;\n@Controller\n@RequestMapping(\"\u002Fjiren\")\npublic class JirenController {\n\t@Autowired\n\tprivate JirenLogic jirenLogic;\n\t\u002F**\n\t * &lt;P&gt;\n\t * 全ユーザー情報を元にhtmlファイルを返却します。&lt;br \u002F&gt;\n\t * 返却される文字列はhtmlを除いたファイル名になります\n\t * &lt;\u002FP&gt;\n\t *\n\t * @param model model\n\t * @return String ViewFileName\n\t *\u002F\n\t@GetMapping(\"\u002Falluser\")\n\tpublic String getAllUser(Model model){\n\t\tList&lt;User&gt; users = jirenLogic.getAll();\n\t\tmodel.addAttribute(\"users\",users);\n\t\treturn \"alluser\";\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E引数のモデルにaddAttributeという形でUserモデルを設定しています。こうすることでUserモデルの情報をビューに表示できます。\u003Cbr \u002F\u003Eまた、returnしている文字列はhtmlファイルの名前になります。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eサービスクラスの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eクラス名がおかしいかもしれません。サービスクラスになります。最初サービスクラスってのを意識しないで作ってておかしなことになりました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eなんか作っててここも理解が浅いなってなりました。。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eインターフェースです\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Epackage com.example.demo.domain.logic;\nimport java.util.List;\nimport com.example.demo.domain.model.User;\npublic interface JirenLogic {\n\t\u002F**\n\t * \t&lt;P&gt;\n\t * 全てのユーザーのモデルを取得します。\n\t * &lt;\u002FP&gt;\n\t * @return {@link User}のリスト\n\t *\u002F\n\tpublic List&lt;User&gt; getAll();\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E実装クラスです\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\npackage com.example.demo.domain.logic.impl;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport javax.annotation.Resource;\nimport org.springframework.stereotype.Service;\nimport com.example.demo.domain.dao.JirenDao;\nimport com.example.demo.domain.entity.UserEntity;\nimport com.example.demo.domain.logic.JirenLogic;\nimport com.example.demo.domain.model.User;\n@Service\npublic class JirenLogicImpl implements JirenLogic{\n\t@Resource\n\tJirenDao jirendao;\n\t\u002F**\n\t * {@inheritDoc}\n\t *\u002F\n\tpublic List&lt;User&gt; getAll(){\n\t\tList&lt;UserEntity&gt; users = jirendao.getAll();\n\t\t\u002F\u002Fモデルにして返却します。\n\t\treturn users.stream().map(user -&gt; {\n\t\t\tUser model = new User();\n\t\t\tmodel.setUser_id(user.getUser_id());\n\t\t\tmodel.setPassword(user.getPassword());\n\t\t\treturn model;\n\t\t}).collect(Collectors.toList());\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Edaoを利用してエンティティを取得します。取得したエンティティをモデルにして返します。\u003Cbr \u002F\u003Eエンティティの時と同じようにマッパークラスを用意してもいいですが、簡素なものなのでその場で変換しています。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EViewの作成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Ethymeleafを使うとhtmlにロジックを組んだり、変数を使うことができます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Esource\u002Fmain\u002Fresources\u002Ftemplatesにalluser.htmlを作成します。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http:\u002F\u002Fwww.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;hello world&lt;\u002Ftitle&gt;\n&lt;\u002Fhead&gt;\n&lt;body&gt;\n&lt;p&gt;My Name is Jiren Tokkou Taichou!&lt;\u002Fp&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th colspan=\"2\"&gt;ユーザー情報&lt;\u002Fth&gt;\n        &lt;\u002Ftr&gt;\n    &lt;\u002Fthead&gt;\n    &lt;tbody　th:each=\"user : ${users}\"&gt;\n        &lt;tr&gt;\n            &lt;td　th:text=\"${user.user_id}\"&gt;id&lt;\u002Ftd&gt;\n            &lt;td　th:text=\"${user.password}\"&gt;password&lt;\u002Ftd&gt;\n        &lt;\u002Ftr&gt;\n    &lt;\u002Ftbody&gt;\n&lt;\u002Ftable&gt;\n&lt;\u002Fbody&gt;\n&lt;\u002Fhtml&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Epomの修正\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Epostgre接続に必要なものや、thymeleafに必要なライブラリをpomに記載しておきます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\n\t\t&lt;dependency&gt;\n\t\t  &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t  &lt;artifactId&gt;spring-boot-starter-jdbc&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;postgresql&lt;\u002FartifactId&gt;\n            &lt;scope&gt;runtime&lt;\u002Fscope&gt;\n        &lt;\u002Fdependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\u002FartifactId&gt;\n        &lt;\u002Fdependency&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E確認\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fjiren\u002Falluser にアクセスします。\u003Cbr \u002F\u003EするとDBから取得した情報が表示されます。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large\"\u003E\u003Cimg src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2021\u002F06\u002Fimage-2.png\" alt=\"\" class=\"wp-image-1378\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003Eかなり飛ばし気味でしたが、Springを使ってpostgreからデータを取得して表示することができました。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eエラー\u003C\u002Fh2\u003E\n\n\n\u003Ch4\u003EViewがあーだこーだ言われる\u003C\u002Fh4\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&#91;2m2021-06-27 17:57:42.205&#91;0;39m &#91;31mERROR&#91;0;39m &#91;35m27980&#91;0;39m &#91;2m---&#91;0;39m &#91;2m&#91;nio-8080-exec-2]&#91;0;39m &#91;36mo.a.c.c.C.&#91;.&#91;.&#91;\u002F].&#91;dispatcherServlet]   &#91;0;39m &#91;2m:&#91;0;39m Servlet.service() for servlet &#91;dispatcherServlet] in context with path &#91;] threw exception &#91;Circular view path &#91;alluser]: would dispatch back to the current handler URL &#91;\u002Fjiren\u002Falluser] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)] with root cause\njavax.servlet.ServletException: Circular view path &#91;alluser]: would dispatch back to the current handler URL &#91;\u002Fjiren\u002Falluser] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)\n\t\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Epom.xmlの依存関係に以下を追記する\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\u002FartifactId&gt;\n        &lt;\u002Fdependency&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch4\u003Elombokのアクセサメソッドが定義されない\u003C\u002Fh4\u003E\n\n\n\u003Cp\u003ESpringToolSuite4.iniに以下を追記する\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E-vmarges -javaagent:lombok.jar\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",protected:j},excerpt:{rendered:"\u003Cp\u003E今回はプロジェクトの整理を行います。正直Springがどういう構成でやるのがベストなのか知らないので、あくまで個人的な記載方法になります。 Springは素人なんでかなりパワー系かもしれないですが、結果的に動くものは作れ&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F28\u002F1%e4%ba%baspring%e5%8b%89%e5%bc%b7%e4%bc%9a-spring%e3%81%a7%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e4%bd%9c%e6%88%90\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E1人Spring勉強会 Springでのクラス作成\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:j},author:m,featured_media:b,comment_status:n,ping_status:n,sticky:j,template:c,format:"standard",meta:[],categories:[i],tags:[47],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1369"}],collection:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1369"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1369\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1369"}],"wp:term":[{taxonomy:d,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1369"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1369"}],curies:[{name:e,href:f,templated:a}]}}}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:e,href:f,templated:a}]}},{id:o,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:e,href:f,templated:a}]}},{id:i,count:p,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:e,href:f,templated:a}]}},{id:q,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:e,href:f,templated:a}]}},{id:p,count:40,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:e,href:f,templated:a}]}},{id:7,count:r,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:e,href:f,templated:a}]}},{id:8,count:q,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:e,href:f,templated:a}]}},{id:r,count:o,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:e,href:f,templated:a}]}},{id:m,count:b,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:e,href:f,templated:a}]}}]}}},mutations:void 0}}(true,0,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",4,false,"2021-06-28T00:27:55","2021-06-27T15:27:55",1,"open",3,6,5,9)));