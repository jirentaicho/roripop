__NUXT_JSONP__("/categories/8", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J){return {data:[{posts:{post:[{id:1276,date:v,date_gmt:w,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1276"},modified:v,modified_gmt:w,slug:"wordpress-%e5%8b%95%e7%9a%84css%e3%81%8c%e9%81%85%e3%81%84%e3%81%ae%e3%81%a7",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F19\u002Fwordpress-%e5%8b%95%e7%9a%84css%e3%81%8c%e9%81%85%e3%81%84%e3%81%ae%e3%81%a7\u002F",title:{rendered:"WordPress | 動的CSSが遅いのでwp localize scriptを使いました"},content:{rendered:"\n\u003Cp\u003EDynamic cssというのだろうか？phpファイルにcssを書くことで、phpのコードをcssでも使えるようにしたものです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E以下のように利用していました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;?php\n    header('Content-Type: text\u002Fcss;', 'charset=utf-8');\n    include('..\u002F..\u002F..\u002F..\u002Fwp-load.php');\n    $options = get_option( 'jimage_options' );\n    $image = wp_get_attachment_url(esc_attr($options&#91;'j_background']));\n?&gt;\n@charset \"utf-8\";\n.j-back-image{\n    background-image: url(&lt;?php echo $image; ?&gt;);\n    background-size: cover;\n    position: relative;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E背景画像をユーザーが簡単に変更できるようにしたいと思いました。\u003Cbr \u002F\u003Eなので画像設定ページを追加してあげて、その値を動的cssでやればOKでしたが、これが遅かった。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eどえりゃー遅いということで、別の方法を考えたところ、wordpressのajax通信で必須な\u003Cstrong\u003Ewp_localize_script\u003C\u002Fstrong\u003Eを利用することにしました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ejsファイルに変数を渡すことができるので、ここで値を渡してやることにしました。\u003Cbr \u002F\u003E勉強がてらテーマカスタマイザを利用していますが、気にしないでください。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E    \u002F**\n     * 共通アセットを読み込みます。\n     *\u002F\n    public function load_jiren_t_common_script(){\n        wp_enqueue_script(\n            'bundle',\n            plugins_url() . '\u002Fjiren-t\u002Fassets\u002Fbundle.js');\n        \u002F\u002F　背景画像はカスタマイザの値を渡します。jsから変更してください。\n\u003Cstrong\u003E        wp_localize_script('bundle', 'ex_background_image', array(\n            'image' =&gt; esc_url( get_theme_mod( 'background_img' ) ),\n        ));   \u003C\u002Fstrong\u003E\n    }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eこんな感じでjsファイルに画像のurlを渡して、js側でcssのimageを変更します。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E    \u002F\u002F背景画像をカスタマイザで指定した画像に変更します。\n    const backgroundImage = document.getElementById(\"wrapper\");\n    backgroundImage.style.backgroundImage = 'url(\"' + ex_background_image.image + '\")';\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eこれだと、動的cssとやらより早かったです。というか動的cssを利用するととても遅くてお話になりませんでしたとさ。。。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003EDynamic cssというのだろうか？phpファイルにcssを書くことで、phpのコードをcssでも使えるようにしたものです。 以下のように利用していました。 背景画像をユーザーが簡単に変更できるようにしたいと思いまし&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F19\u002Fwordpress-%e5%8b%95%e7%9a%84css%e3%81%8c%e9%81%85%e3%81%84%e3%81%ae%e3%81%a7\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EWordPress | 動的CSSが遅いのでwp localize scriptを使いました\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:k,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[l],tags:[t],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1276"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1276"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1276\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1276"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1276"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1276"}],curies:[{name:f,href:g,templated:a}]}},{id:1265,date:x,date_gmt:y,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1265"},modified:x,modified_gmt:y,slug:"%e5%a4%9c%e3%81%ae%e5%ba%97%e5%b0%82%e9%96%80%e3%81%ae%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F08\u002F%e5%a4%9c%e3%81%ae%e5%ba%97%e5%b0%82%e9%96%80%e3%81%ae%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f\u002F",title:{rendered:"夜の店専門のワードプレスのプラグインを作ったお話"},content:{rendered:"\n\u003Cfigure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"\u003E\u003Cdiv class=\"wp-block-embed__wrapper\"\u003E\n\u003Cblockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"\u003E\u003Cp lang=\"ja\" dir=\"ltr\"\u003E風俗店とかキャバクラとかホストとかで使える、夜のお店専門のワードプレスのプラグインが完成したのだ！\u003Ca href=\"https:\u002F\u002Ft.co\u002F17NSse9OwS\"\u003Ehttps:\u002F\u002Ft.co\u002F17NSse9OwS\u003C\u002Fa\u003E\u003C\u002Fp\u003E&mdash; 超電磁砲 (@keisukesiratori) \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fkeisukesiratori\u002Fstatus\u002F1402116665555386374?ref_src=twsrc%5Etfw\"\u003EJune 8, 2021\u003C\u002Fa\u003E\u003C\u002Fblockquote\u003E\u003Cscript async src=\"https:\u002F\u002Fplatform.twitter.com\u002Fwidgets.js\" charset=\"utf-8\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003E最近、トゥイッターをはじめました。登録はしてたんですが、アカウント忘れてて、ようやく見つけました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E今回は、こんないかがわしいトゥイートを発見しました。\u003Cbr \u002F\u003Eなんと、夜のお店のテーマに使えるような、テーマ拡張型のワードプレスのプラグインを作成しました。とのことです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E割と必要な機能は揃ってると思います、あとは改造も楽にできそうな予感がしてます。（プロフィール画像を追加したいとか）\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E今回はプラグインの紹介と作りについて少し記載します。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E作ったプラグインとは\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003ESuperNightPluginというプラグインを作りました。\u003Cbr \u002F\u003E夜のお店で使えるプラグインになります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjirentaicho\u002FSuperNightPlugin\"\u003Ehttps:\u002F\u002Fgithub.com\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjirentaicho\u002FSuperNightPlugin\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u002F\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjirentaicho\u002FSuperNightPlugin\"\u003Ejirentaicho\u002FSuperNightPlugin\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eテーマ拡張型プラグインという言葉があるかわかりませんが、テーマ作成を拡張するようなプラグインになります。なので、ある程度テーマを作れる人が使用することを想定しています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E機能としては、こんな感じです。\u003C\u002Fp\u003E\n\n\n\u003Cul\u003E\u003Cli\u003Eキャストの管理機能\u003C\u002Fli\u003E\u003Cli\u003Eキャストのスケジュール管理機能\u003C\u002Fli\u003E\u003Cli\u003Eメール投稿機能（別途Postieプラグインを利用します）\u003C\u002Fli\u003E\u003Cli\u003EAPIの提供\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\n\n\u003Ch3\u003Eキャストの管理機能\u003C\u002Fh3\u003E\n\n\n\u003Cp\u003Eいわゆるカスタム投稿タイプってやつでキャストを追加しています。\u003Cbr \u002F\u003E在籍するキャストの数だけ登録してください。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまた、メールアドレスの入力欄があり、Postieというプラグインを有効化している場合は、自動的にPostie側のプラグインにも許可メールアドレスが登録されるようになっています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EPostieはメールアドレスさえあれば、メール投稿が可能なプラグインですので、わざわざワードプレスのユーザーを作る手間を省いています。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eキャストのスケジュール管理機能\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eスケジュール管理画面を追加しました。\u003Cbr \u002F\u003Eこれはキャストごとに保持しているmyscheduleというカスタムフィールドに値を設定します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eカスタムフィールドの中に配列を用意することで、別のテーブルを用意することなくスケジュール情報を管理しています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E業務とかでのテーブル設計ではこのような書き方はあまりしませんが、ワードプレスの他のプラグインを見ると、この手法はよくあるテクニックのようで、Postieでも使われていました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eいちいち更新処理が入るたびに画面が更新されるのが面倒なのでAjaxを使いました。\u003Cbr \u002F\u003Ewordpressではajax通信ではwp_ajax_関数名というアクションフックを利用することで実装できます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F\u002Fアクションフック\nadd_action('wp_ajax_register_ajax_data', array($this,'register_ajax_data'));\n\u002F\u002Fその内容（一部）\npublic function register_ajax_data(){\n        $nonce = $_POST&#91;\"nonce\"];\n        $post_id = $_POST&#91;\"post_id\"];\n        if(wp_verify_nonce($nonce,'get-schedule-nonce')){\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003EどうやってnonceをAjaxのパラメータに渡すのかというと、jsファイルを読み込ませる際に設定できます（詳しくはgithubにソースがあります）\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E        wp_localize_script('myscript', 'ex_values', array(\n            'admin_url' =\u003E esc_url(admin_url( 'admin-ajax.php', __FILE__ )),\n            'nonce' =\u003E wp_create_nonce('get-schedule-nonce'),\n        )); \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Ejs側ではURLSearchParamsを利用します。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E    let param = new URLSearchParams();\n    &#91; ... inputs].forEach(input =\u003E param.append(input.name,input.value) )\n    param.append(\"action\", 'register_ajax_data')\n    param.append(\"nonce\", ex_values.nonce)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eメール投稿機能（別途Postieプラグインを利用します）\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eメール投稿機能といえば、キャストのブログのようなものです。\u003Cbr \u002F\u003Eワードプレスにはユーザーを追加する機能があるので、キャストごとにユーザーを追加してキャストがそのユーザー情報でログインして投稿すれば、問題なくそれが実現できます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eでも、それって面倒くさいです。キャスト側もいちいちログインしないといけないのは面倒です。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eそこで、複数のユーザーがメール投稿できるプラグインPostieを使うことにしました。\u003Cbr \u002F\u003Eそうすれば実装できる気がしない、メールの設定処理も全てお任せできます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eなので、私がやったことは、キャストのメールアドレスとpostieのメールアドレスを強制的に紐づけることだけです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこうすることで、キャストごとにメールでブログの投稿ができようになります。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EAPIの提供\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E必要な機能は作っても、テーマ側でどうやって利用するのか？\u003Cbr \u002F\u003Eまさか実装を全て読むなんて面倒なことをさせてはいけないので、APIを用意しました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eテーマ作成者は、globalに用意されたAPIを利用するだけで、テーマにプラグインの機能を取り込めるようにしました。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E感想\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eプラグイン化しておくことで、お店のホームページを作るってなったときに、0から用意する必要がなくなるので便利ですねって思いました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eあと、正直ワードプレスってあんまり詳しくないんで、結構調べながらやったんですが、カスタム投稿タイプはこのプラグインを使え！みたいな記事が多い印象。\u003Cbr \u002F\u003Eいや、そうじゃない。。。と思いながらも、プログラマーでなくても機能拡張できるプラグインってのはすごいなと思いました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eあと、PHPという言語は難しいな。と思いました。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E最近、トゥイッターをはじめました。登録はしてたんですが、アカウント忘れてて、ようやく見つけました。 今回は、こんないかがわしいトゥイートを発見しました。なんと、夜のお店のテーマに使えるような、テーマ拡張型のワードプレスの&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F08\u002F%e5%a4%9c%e3%81%ae%e5%ba%97%e5%b0%82%e9%96%80%e3%81%ae%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E夜の店専門のワードプレスのプラグインを作ったお話\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:k,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[l],tags:[t],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1265"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1265"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1265\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1265"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1265"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1265"}],curies:[{name:f,href:g,templated:a}]}},{id:1263,date:z,date_gmt:A,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1263"},modified:z,modified_gmt:A,slug:"wordpress%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%81%8b%e3%82%89%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%a0%e6%8a%95%e7%a8%bf%e3%82%bf%e3%82%a4%e3%83%97%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F06\u002Fwordpress%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%81%8b%e3%82%89%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%a0%e6%8a%95%e7%a8%bf%e3%82%bf%e3%82%a4%e3%83%97%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f\u002F",title:{rendered:"WordPressのプラグインからカスタム投稿タイプを作ったけどsingleが全く機能しない件"},content:{rendered:"\n\u003Cp\u003E今、ワードプレスのプラグインを作っています。\u003Cbr \u002F\u003Eプラグインの中でカスタム投稿タイプを作成しましたが、こいつがsingle.phpで全く認識しない問題がありました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E原因は正直よくわかりませんでしたが、一応解決できたのでメモしておきます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EAddCastPostTypeクラスでcastというカスタム投稿タイプを作成しています。\u003Cbr \u002F\u003E以下は失敗例です。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;?php\nclass AddCastPostType{\n    public function __construct(){\n        if (!defined('ABSPATH')) {\n            exit;\n        }\n        add_action('init',array($this,'create_item_post_type'));\n    }\n    function create_item_post_type() {\n        register_post_type( 'cast', &#91;\n            'labels' =\u003E &#91;\n                'name'          =\u003E 'キャスト',\n                'singular_name' =\u003E 'cast',\n                'add_new_casr' =\u003E 'キャストを追加',\n                'add_new' =\u003E '新規キャスト登録',\n            ],\n            \u002F\u002F'rewrite'       =\u003E array( 'slug' =\u003E 'cast' ),\n            'public'        =\u003E true,\n            'has_archive'   =\u003E true,\n            'menu_position' =\u003E 610,\n            'show_in_rest'  =\u003E true,\n        ]);\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E問題なく管理画面にキャストが追加されます。\u003Cbr \u002F\u003E次はこのクラスをインスタンス化します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eプラグインファイルにてクラスのインスタンス化します。\u003Cbr \u002F\u003E（余計な箇所は省略しています）\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Erequire_once dirname( __FILE__ ) . '\u002Fapp\u002FCustomPost\u002FCast\u002FAddCastPostType.php';\n\u002F**\n * 初期化します。\n *\u002F\nclass ItemManager{\n    public function init(){\n        \u002F**\n         * 必要なクラスをインスタンス化する\n         * それぞれクラスはコンストラクタからadd_actionなどで処理を行って行く\n         *\u002F\n        if(HelperUtility::isLoginStatus()){\n            $cast_post_type = new AddCastPostType();\r \u002F\u002Fこれが問題\n        }\n    }\n}\n\u002F**\n * クラスをインスタンス化して初期化メソッドを実行する\n *\u002F\n$item_manager = new ItemManager();\n$item_manager-\u003Einit();\n\r\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eプログラミングのお作法に基づいてクラスをインスタンス化したんですけど、これが問題でした。\u003Cbr \u002F\u003Eなんでかわかりませんが、以下の書き方に変えるとsingle.phpで認識するようになりました。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E&lt;?php\n\r\u002F\u002Fここでインスタンス化？？？\n$addCastPostType = new AddCastPostType;\nclass AddCastPostType{\n    public function __construct(){\n        if (!defined('ABSPATH')) {\n            exit;\n        }\n        add_action('init',array($this,'create_item_post_type'));\n    }\n    function create_item_post_type() {\n        register_post_type( 'cast', &#91;\n            'labels' =\u003E &#91;\n                'name'          =\u003E 'キャスト',\n                'singular_name' =\u003E 'cast',\n                'add_new_casr' =\u003E 'キャストを追加',\n                'add_new' =\u003E '新規キャスト登録',\n            ],\n            \u002F\u002F'rewrite'       =\u003E array( 'slug' =\u003E 'cast' ),\n            'public'        =\u003E true,\n            'has_archive'   =\u003E true,\n            'menu_position' =\u003E 610,\n            'show_in_rest'  =\u003E true,\n        ]);\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eクラス内の変数にインスタンス化？したクラスを持たせることで、解決しました。\u003Cbr \u002F\u003Eつまり、プラグインファイルからはインクルードするだけで、インスタンス化はしません。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eclass ItemManager{\n    public function init(){\n        if(HelperUtility::isLoginStatus()){\n            \u002F\u002F$cast_post_type = new AddCastPostType();\n 。\n        }\n    }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eとりあえず、$addCastPostType = new AddCastPostType;のような書き方について調べる必要がありますが、解決しました。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E今、ワードプレスのプラグインを作っています。プラグインの中でカスタム投稿タイプを作成しましたが、こいつがsingle.phpで全く認識しない問題がありました。 原因は正直よくわかりませんでしたが、一応解決できたのでメモし&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F06\u002F06\u002Fwordpress%e3%81%ae%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e3%81%8b%e3%82%89%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%a0%e6%8a%95%e7%a8%bf%e3%82%bf%e3%82%a4%e3%83%97%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%9f\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EWordPressのプラグインからカスタム投稿タイプを作ったけどsingleが全く機能しない件\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:k,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[l],tags:[t],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1263"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1263"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1263\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1263"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1263"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1263"}],curies:[{name:f,href:g,templated:a}]}},{id:1185,date:B,date_gmt:C,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1185"},modified:B,modified_gmt:C,slug:"%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e6%94%b9%e9%80%a0%e8%a8%88%e7%94%bb",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F04\u002F25\u002F%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e6%94%b9%e9%80%a0%e8%a8%88%e7%94%bb\u002F",title:{rendered:"ワードプレスのテーマ改造計画"},content:{rendered:"\n\u003Cp\u003E色んなテーマを見てきたが俺は「Dan」というテーマが気に入ってる。\u003Cbr \u002F\u003E何より無駄がなくシンプルで使いやすいし無料。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eブログ用のテーマにわざわざお金を払う必要ってあんまりないと思うし、いろいろ盛り込んでも見づらいサイトができるだけ。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eとりあえず、最近はテーマを作ってみたり、functionsに書いていたようなことをpluginにしてみたりとやってきたので、シンプルで素晴らしいテーマを改造してみた。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjirentaicho\u002Fwordpress_plugin_item_manager\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fjirentaicho\u002Fwordpress_plugin_item_manager\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Ephpファイルを編集するのは問題ないのだが、cssなどを書き換えるのはライセンス的にどうなん？ってのがわからないので子テーマを利用することにした。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E自分自身ワードプレスの開発のベストプラクティス的なのを全く知らないのでほぼ感覚でやってますのでご注意を。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eちなみに修正前はこんな感じです。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large\"\u003E\u003Cimg src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2021\u002F04\u002Fhoge-350x1024.png\" alt=\"\" class=\"wp-image-1207\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eとりあえず、テーマ改造の前に思っていること\u003C\u002Fp\u003E\n\n\n\u003Cul\u003E\u003Cli\u003Eサイドバーというものは無くしたい\u003C\u002Fli\u003E\u003Cli\u003Eサイドバーの代わりはメインコンテンツの下に移動したい\u003C\u002Fli\u003E\u003Cli\u003Eヘッダーの下にswiperスライダー系の記事リンクが欲しい\u003C\u002Fli\u003E\u003Cli\u003Eコードを綺麗に表示させたい\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\n\n\u003Cp\u003E私が最近思っていることですが、いろんなwebサイトを見てて情報が多すぎて何を見れば良いのかわからない時があるんですよね\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eその原因の一つがサイドバーだと思っています。至る所に色んなものが散らばっていてね。プログラミングで言えばクラスの責務が多すぎる問題的な？\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eというかね、そもそもハンバーガーメニューとか嫌いなんですよ。わざわざワンアクション必要なメニューってどうなん？え？ならサイドバー素直に置いとけって？？？\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eあと私はアンチjQueryなんで、Swiperは気に入ってます。\u003Cbr \u002F\u003E会社のwebシステムで追加機能つける仕事をした時に、jQueryのver1.9とかを使っていて苦しい思いをしたのが懐かしいです。。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eいろいろ言いましたが、好みの問題なので宗教についての意見はやめておきます。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E子テーマを作る\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E子テーマは、テーマフォルダに子テーマのフォルダを追加するだけできます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E参考：\u003Ca rel=\"noreferrer noopener\" href=\"https:\u002F\u002Fwpdocs.osdn.jp\u002F%E5%AD%90%E3%83%86%E3%83%BC%E3%83%9E\" target=\"_blank\"\u003Ehttps:\u002F\u002Fwpdocs.osdn.jp\u002F%E5%AD%90%E3%83%86%E3%83%BC%E3%83%9E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E親テーマ\u003Cbr \u002F\u003E子テーマ\u003Cbr \u002F\u003E　style.css\u003Cbr \u002F\u003E　functions.php\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Ch2\u003EGulpを使ってみる\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eswiperのページを見るとjsの初期化を行っていますが、トランスパイルしてあげようと思った時に、gulpってのを使ってみようか！となったので、下記サイトを参考に導入しました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca rel=\"noreferrer noopener\" href=\"https:\u002F\u002Fqiita.com\u002Fnon_cal\u002Fitems\u002F5fad826d75b9f5d84d21\" target=\"_blank\"\u003Ehttps:\u002F\u002Fqiita.com\u002Fnon_cal\u002Fitems\u002F5fad826d75b9f5d84d21\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこれをテーマフォルダでやると大量のファイルがnode_modulesというフォルダの中にできてしまうので、themesフォルダと同階層にjsworkフォルダを作って、トンラスパイル先をthemesフォルダにするやり方にしました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E何が言いたいかというとこのサイトと同じようなことです\u003Cbr \u002F\u003E\u003Ca href=\"https:\u002F\u002Fetwas-neues.info\u002Fweb_design\u002Fpost-243\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehttps:\u002F\u002Fetwas-neues.info\u002Fweb_design\u002Fpost-243\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E今回は自分で書いたjsをトランスパイルするだけなので、これで十分ですね。\u003Cbr \u002F\u003Esaasは使わずbabelだけなのですが、勉強がてらに導入してみた感じです。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EJsのプラグインを導入する\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E今回導入したのはswiperとhighlight.jsです。\u003Cbr \u002F\u003Eとりあえず親テーマにjsファイルとcssファイルを入れて、子テーマのfunctionsでそれを有効化しています。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F**\n * 追加js\n *  ・swiper\n *  ・hightlight\n *\u002F\nfunction add_ex_scripts() {\n  $my_theme = wp_get_theme();\n  $version = $my_theme-\u003Eget( 'Version' );\n  \u002F\u002F js\n  wp_enqueue_script('swiper.js', get_template_directory_uri() . '\u002Fassets\u002Fjs\u002Fswiper.min.js', array(), '5.4.5', true);\n  wp_enqueue_script('hightlight.js', get_template_directory_uri() . '\u002Fassets\u002Fjs\u002Fhighlight.pack.js', array(), '10.7.2', true);\n  \u002F\u002F css\n  wp_enqueue_style('swiper.css', get_template_directory_uri() . '\u002Fassets\u002Fcss\u002Fswiper.min.css', array(), '5.4.5');\n  wp_enqueue_style('default.css', get_template_directory_uri() . '\u002Fassets\u002Fcss\u002Fcodestyle\u002Fdefault.css', array(), '5.4.5');\n  \u002F\u002F swpierの初期化\n  wp_enqueue_script('jiren_dits.js', get_template_directory_uri() . '\u002Fassets\u002Fjs\u002Fjiren_dist.js', array(), $version, true);\n}\nadd_action( 'wp_enqueue_scripts', 'add_ex_scripts' );\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eカスタムをしていく\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003Eここまでくるとあとは既存のcssを子テーマで書き換えて行ったり、追加していく作業です。\u003Cbr \u002F\u003Eそこで思ったのが、やっぱり公式に出るようなテーマは綺麗な作りになっているなぁと。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eありとあらゆる箇所に修正が必要なわけでなく、ある程度共通化されているので修正も簡単でした。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eワードプレスには標準で色んなブロックがすでにあるので良いですね。\u003Cbr \u002F\u003E例えば\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E２カラム\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"wp-block-columns\"\u003E\n\u003Cdiv class=\"wp-block-column\"\u003E\n\u003Cp\u003E左のカラム\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cdiv class=\"wp-block-column\"\u003E\n\u003Cp\u003E右のカラム\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003Eこんな感じで勝手にレスポンシブなの作ってくるので、便利です。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E残作業\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E残りの作業は以下のような感じです\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-table\"\u003E\u003Ctable\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd\u003Eタスク\u003C\u002Ftd\u003E\u003Ctd\u003E難易度\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Ctd\u003Eデフォルトアイキャッチ画像\u003C\u002Ftd\u003E\u003Ctd\u003E低\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Ctd\u003E記事のスタイルの微調整\u003C\u002Ftd\u003E\u003Ctd\u003E低\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003C\u002Ftbody\u003E\u003C\u002Ftable\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003Eタスクは残っていますが、運営できる程度のテーマには修正できたので一旦公開してみました！\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E色んなテーマを見てきたが俺は「Dan」というテーマが気に入ってる。何より無駄がなくシンプルで使いやすいし無料。 ブログ用のテーマにわざわざお金を払う必要ってあんまりないと思うし、いろいろ盛り込んでも見づらいサイトができる&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F04\u002F25\u002F%e3%83%af%e3%83%bc%e3%83%89%e3%83%97%e3%83%ac%e3%82%b9%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e6%94%b9%e9%80%a0%e8%a8%88%e7%94%bb\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003Eワードプレスのテーマ改造計画\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:k,featured_media:1206,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[l],tags:[t,61,67,68],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1185"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1185"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1185\u002Frevisions"}],"wp:featuredmedia":[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia\u002F1206"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1185"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1185"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1185"}],curies:[{name:f,href:g,templated:a}]}},{id:1173,date:D,date_gmt:E,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=1173"},modified:D,modified_gmt:E,slug:"wordpress%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e8%b2%a9%e5%a3%b2%e3%81%97%e3%81%9f%e8%a9%b1",status:m,type:n,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F04\u002F17\u002Fwordpress%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e8%b2%a9%e5%a3%b2%e3%81%97%e3%81%9f%e8%a9%b1\u002F",title:{rendered:"WordPressのテーマを作って販売した話"},content:{rendered:"\n\u003Cp\u003E最近は仕事のせいで全くゲーム作りができませんでした。\u003Cbr \u002F\u003E仕事はJavaを使っていますが、Javaってなんか好きになれないんですよね。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eゲーム作りはパワーが必要なんで、WordPressのテーマを作って癒されていました。\u003Cbr \u002F\u003E最近はGatsby.jsとかが人気ですが、私はWordPressが最強だと思っています。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E理由は省略しますが、結局WordPressてすごいんですよね。\u003Cbr \u002F\u003Eというわけで、WordPressのテーマを作成しました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E今回作ったのはズバリ「夜のお店」に向けてテーマを作りました。\u003Cbr \u002F\u003E夜のお店なので詳しいことは販売サイトでご説明します。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Ca rel=\"noreferrer noopener\" href=\"https:\u002F\u002Foreemo.booth.pm\u002Fitems\u002F2898353\" target=\"_blank\"\u003Ehttps:\u002F\u002Foreemo.booth.pm\u002Fitems\u002F2898353\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Cspan class=\"has-inline-color has-vivid-red-color\"\u003Eもっと良いものを作れそうなので、これは無料にしました。\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eいわゆる勤怠管理とかプラグインもあるようですが、今回は自作しました。\u003Cbr \u002F\u003E簡単なトリックを使えば簡単作れるので、わざわざプラグインを利用するまでもないかなといったところです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E簡単なトリックというのは配列を使うことです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EPHPの配列はJavaScriptのオブジェクトのようにkeyとvalueを設定できるようですので（PHPあんまり詳しくない）それを応用して日付をkeyに出勤情報を登録するという感じです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eこれをやってしまうと、実は応用が効かないのですが、必要な機能は実装できていますので問題ないといったところです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EWordPressはカスタム投稿タイプとかカスタムフィールドを使うようになると、カスタマイズの幅が広がります。\u003Cbr \u002F\u003Eこれらのプラグインもありますが、これもわざわざプラグインを利用する必要はありません。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eテーマは前々から作ったりしていますが、結構力を入れて作りました。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E次はワードプレスのプラグイン開発をしてみようかなと思っています。\u003C\u002Fp\u003E\n",protected:c},excerpt:{rendered:"\u003Cp\u003E最近は仕事のせいで全くゲーム作りができませんでした。仕事はJavaを使っていますが、Javaってなんか好きになれないんですよね。 ゲーム作りはパワーが必要なんで、WordPressのテーマを作って癒されていました。最近は&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2021\u002F04\u002F17\u002Fwordpress%e3%81%ae%e3%83%86%e3%83%bc%e3%83%9e%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e8%b2%a9%e5%a3%b2%e3%81%97%e3%81%9f%e8%a9%b1\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EWordPressのテーマを作って販売した話\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:c},author:k,featured_media:b,comment_status:h,ping_status:h,sticky:c,template:d,format:o,meta:[],categories:[l],tags:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1173"}],collection:[{href:p}],about:[{href:q}],author:[{embeddable:a,href:r}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=1173"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F1173\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=1173"}],"wp:term":[{taxonomy:e,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=1173"},{taxonomy:s,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=1173"}],curies:[{name:f,href:g,templated:a}]}}]},categoryName:F}],fetch:{"0":{categories:{categories:[{id:2,count:u,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:f,href:g,templated:a}]}},{id:G,count:u,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:f,href:g,templated:a}]}},{id:u,count:H,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:f,href:g,templated:a}]}},{id:I,count:u,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:f,href:g,templated:a}]}},{id:H,count:40,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:f,href:g,templated:a}]}},{id:7,count:J,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:f,href:g,templated:a}]}},{id:l,count:I,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:F,slug:"wordpress",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:f,href:g,templated:a}]}},{id:J,count:G,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:f,href:g,templated:a}]}},{id:k,count:b,description:d,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:e,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:i}],about:[{href:j}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:f,href:g,templated:a}]}}]}}},mutations:void 0}}(true,0,false,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","open","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",1,8,"publish","post","standard","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1","post_tag",56,4,"2021-06-19T21:29:57","2021-06-19T12:29:57","2021-06-08T22:19:14","2021-06-08T13:19:14","2021-06-06T21:55:56","2021-06-06T12:55:56","2021-04-25T23:37:15","2021-04-25T14:37:15","2021-04-17T18:37:18","2021-04-17T09:37:18","WordPress",3,6,5,9)));