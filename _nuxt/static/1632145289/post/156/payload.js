__NUXT_JSONP__("/post/156", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:[{post:{id:156,date:l,date_gmt:m,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=156"},modified:l,modified_gmt:m,slug:"%e9%96%a2%e6%95%b0%e5%9e%8bjavascript",status:"publish",type:"post",link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F05\u002F24\u002F%e9%96%a2%e6%95%b0%e5%9e%8bjavascript\u002F",title:{rendered:"関数型JavaScript"},content:{rendered:"\n\u003Cp\u003E暇な人は読んでください。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E勉強メモ的なものです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E俺は激怒した\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003EBuild = function (name,Maketype){\n  const machineName = name;\n  return function (cost){\n    Maketype(cost,machineName);\n  }\n}\ntypeOne = function(cost,name){\n  console.log(\"Made In TypeOne - cost is:\" + cost + \" name is \" + \"'\"+ name +\"'\");\n}\ntypeTwo = function(cost,name){\n  console.log(\"Made In TypeTwo- cost is:\" + cost * 2 + \" name is \" + name + \" (C) \");\n}\nconst Robo1 = Build(\"zaku\",typeOne);\nRobo1(100);\nconst Robo2 = Build(\"guhu\",typeTwo);\nRobo2(100);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E&#8220;Made In TypeOne &#8211; cost is:100 name is &#8216;zaku'&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;Made In TypeTwo- cost is:200 name is guhu (C) &#8220;\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003Eこれは関数を返す関数やらクロージャーやらが使われている。\u003Cbr \u002F\u003Eなぜこんなことが起きてしまうかと言うと、JavaScriptは関数が第一級オブジェクトであるからだ。\u003Cbr \u002F\u003E簡単に言えば、関数を引数にしたり戻り値として使えるということ。\u003Cbr \u002F\u003Eまた、関数を引数にとる高階関数もある。高階関数で有名なのがmap関数だ。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Efunction calcTax(num){\n  return num * 1.08;\n}\nconst values = &#91;100,150,200];\nconst plusTax = values.map( v =\u003E calcTax(v) );\nconsole.log(plusTax);\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E[108, 162, 216]\u003C\u002Fp\u003E\u003Cp\u003Eここではわかりやすく&#8221;あえて&#8221;calcTaxを定義しています。\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003EこのようにJavaScriptは関数の使用範囲が広いのだ。\u003Cbr \u002F\u003E関数型言語というのは関数が主体となっていくため、このように関数を柔軟に扱う必要がある。そしてJavaScriptはそれができる。\u003C\u002Fp\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E純粋関数型言語：Haskellのような言語は純粋関数型言語と呼ばれている。例えば変数に値を再代入することはもちろん、for文なんかも許されていない。またNullという概念自体がなくMaybeなどモナドという考えがある。また関数は必ず値を受け取って必ず値を返す。\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Ch2\u003Eカリー化\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E関数を美味しくするにはスパイスが必要だ。Haskellのような神々しい言語では全ての関数は引数を一つしか取らない。だが実際には複数の引数を取っている関数を定義できる。理由としては内部で美味しいスパイスが効いているから。。。ごほん、引数をとる関数を返すというのを繰り返しているのです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eでは、関数を返しまくる関数を作ってみた\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Efunction addNum(num1){\n  return function(num2){\n    return num1 + num2;\n  }\n}\nconst addTen = addNum(10);\nconsole.log(addTen(3));\nfunction makeDOM(item){\n  return function(child){\n    return function(parrent){\n      return function(text){\n        return \"&lt;\" + parrent + \"\u003E&lt;\" + child + \"\u003E&lt;\" + item + \"\u003E\" + text + \"&lt;\u002F\" + item + \"\u003E&lt;\u002F\" + child + \"\u003E&lt;\u002F\" + parrent + \"\u003E\";\n      }\n    }\n  }\n}\nconst makeH2 = makeDOM(\"B\")(\"SPAN\")(\"H2\");\nconsole.log(makeH2(\"ネオグランゾンの倒し方\"));\nconsole.log(makeH2(\"サフィーネをレベル30にする方法\"));\nconsole.log(makeH2(\"ナグツァート無敵モードを倒す方法\"));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E13\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&lt;H2&gt;&lt;SPAN&gt;&lt;B&gt;ネオグランゾンの倒し方&lt;\u002FB&gt;&lt;\u002FSPAN&gt;&lt;\u002FH2&gt;&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&lt;H2&gt;&lt;SPAN&gt;&lt;B&gt;サフィーネをレベル30にする方法&lt;\u002FB&gt;&lt;\u002FSPAN&gt;&lt;\u002FH2&gt;&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&lt;H2&gt;&lt;SPAN&gt;&lt;B&gt;ナグツァート無敵モードを倒す方法&lt;\u002FB&gt;&lt;\u002FSPAN&gt;&lt;\u002FH2&gt;&#8221;\u003C\u002Fp\u003E\u003Ccite\u003Eh2 span bという謎は置いといてくれ。\u003C\u002Fcite\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst newLink = makeDOM(\"NEW\")(\"LINK\");\nconst blankLink = makeDOM(\"BKANK\")(\"LINK\")\nconst blueNewLink = newLink(\"BLUE\");\nconst blackBankLink = blankLink(\"BLACK\");\nconst link1 = blueNewLink(\"youtube.com\");\nconst link2 = blackBankLink(\"niconico.com\");\nconsole.log(link1)\nconsole.log(link2)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E&#8220;&lt;BLUE&gt;&lt;LINK&gt;&lt;NEW&gt;youtube.com&lt;\u002FNEW&gt;&lt;\u002FLINK&gt;&lt;\u002FBLUE&gt;&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&lt;BLACK&gt;&lt;LINK&gt;&lt;BKANK&gt;niconico.com&lt;\u002FBKANK&gt;&lt;\u002FLINK&gt;&lt;\u002FBLACK&gt;&#8221;\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003Eカリー化された関数を使って新しい関数を作っているのがわかる。これは関数を部分適用している。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E近代的な書き方ではこのようにもできる\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst callType = name =\u003E type =\u003E name + type;\nconsole.log(callType(\"横山\")(\"様\"));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E&#8220;横山様&#8221;\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Ch2\u003E関数型で考えたサンプル\u003C\u002Fh2\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Efunction validation(rule,message){\n  return function(value){\n    if(rule(value)){\n      console.log(\"OK\");\n    }else{\n      console.log(message)\n    }\n  }\n}\nconst overTen = validation( x =\u003E x \u003E 10 , \"１０以下なのでだめでーす\");\noverTen(4)\noverTen(10)\noverTen(11)\nconsole.log(\"---------------------\")\nconst odd = validation( x =\u003E x % 2 === 0, \"奇数はエラーです\");\nodd(5);\nodd(6);\nconsole.log(\"---------------------\")\nvalidation( x =\u003E x===true ,\"とりあえずエラーです\")(false)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cblockquote class=\"wp-block-quote\"\u003E\u003Cp\u003E&#8220;１０以下なのでだめでーす&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;１０以下なのでだめでーす&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;OK&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8220;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;奇数はエラーです&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;OK&#8221;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8220;\u003C\u002Fp\u003E\u003Cp\u003E&#8220;とりあえずエラーです&#8221;\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003Eバリデーション。ルールとメッセージを関数に渡すとバリデーション関数が出来上がるという仕組み\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E関数合成\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E関数合成を簡単な例でやってみる\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst addTow = x =\u003E x + 2;\nconst double = x =\u003E x * 2;\nconst addOne = x =\u003E x + 1;\nconst result = double(addOne(addTow(1)));\n\u002F\u002F 3 → 4 → 8\nconsole.log(result) \u002F\u002F 8\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E読みづらい。関数を適用した結果を別の関数に適用するを繰り返すだけ。\u003Cbr \u002F\u003Eよくあるのがreduceを使う関数合成方法。\u003Cbr \u002F\u003Ereduceは値を合計しながら関数を適用し続けることができる。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst datas = &#91;1,2,3,4];\nconst reduceresult = datas.reduce( (accumu,current) =\u003E {\n  return accumu += current;\n});\nconsole.log(reduceresult);\n\u002F\u002F 10\nconst datas = &#91;1,2,3,4];\nconst reduceresult = datas.reduce( (accumu,current) =\u003E {\n  return accumu += current;\n},100); \u002F\u002F 100が初期値\nconsole.log(reduceresult);\n\u002F\u002F 110\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eこのようにreduceは初期値を使用することもでき、配列に入った要素をぐるぐる回しながら合計値として値を保持できる。ということは配列の中に関数があった場合はどうなるのか\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Econst datas = &#91;addOne,addOne,addOne,addOne];\nconst reduceresult = datas.reduce( (accumu,fun) =\u003E {\n  return fun(accumu);\n},0);\nconsole.log(reduceresult); \u002F\u002F 4\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Ewow！ファンタスティック！配列の中にaddOne関数が入っていて、それを初期値0に適用し続ければ関数合成ができた！\u003C\u002Fp\u003E\n\n\n\u003Ch3\u003Eスプレッド演算子を使ってみる\u003C\u002Fh3\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Efunction showArgs(...args){\n  console.log(args);\n}\nshowArgs(1,2,3,4,5,6,7,8,9,10);\n\u002F\u002F &#91;1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E&#8230;から始まるスプレッド演算子を使うと、複数の要素を配列に変換してくれる。\u003Cbr \u002F\u003Evue.jsでもどっかで使われていたような気がする。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eあとはクロージャと組み合わせれば関数合成の完成だ！\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\u002F\u002F 複数の関数を受け取る関数\nfunction composition(...funs){\n  return (targetValue) =\u003E {\n    return funs.reduce( (accum,func) =\u003E {\n      return func(accum);\n    },targetValue)\n  }\n}\nconst sugeResult = composition(addOne,addOne,addOne,addOne)(10);\nconsole.log(sugeResult);\n\u002F\u002F 14\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E関数型っぽくなってきた。\u003C\u002Fp\u003E\n",protected:j},excerpt:{rendered:"\u003Cp\u003E暇な人は読んでください。 勉強メモ的なものです。 俺は激怒した &#8220;Made In TypeOne &#8211; cost is:100 name is &#8216;zaku&#8217;&#8221; &#8220;&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F05\u002F24\u002F%e9%96%a2%e6%95%b0%e5%9e%8bjavascript\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003E関数型JavaScript\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:j},author:n,featured_media:b,comment_status:o,ping_status:o,sticky:j,template:c,format:"standard",meta:[],categories:[k],tags:[26,34,75],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F156"}],collection:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=156"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F156\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=156"}],"wp:term":[{taxonomy:d,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=156"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=156"}],curies:[{name:e,href:f,templated:a}]}}}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:e,href:f,templated:a}]}},{id:p,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:e,href:f,templated:a}]}},{id:i,count:q,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:e,href:f,templated:a}]}},{id:k,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:e,href:f,templated:a}]}},{id:q,count:40,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:e,href:f,templated:a}]}},{id:7,count:r,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:e,href:f,templated:a}]}},{id:8,count:k,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:e,href:f,templated:a}]}},{id:r,count:p,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:e,href:f,templated:a}]}},{id:n,count:b,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:e,href:f,templated:a}]}}]}}},mutations:void 0}}(true,0,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",4,false,5,"2020-05-24T18:35:32","2020-05-24T09:35:32",1,"open",3,6,9)));