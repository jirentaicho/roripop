__NUXT_JSONP__("/post/814", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:[{post:{id:814,date:l,date_gmt:m,guid:{rendered:"https:\u002F\u002Fvolkruss.com\u002F?p=814"},modified:l,modified_gmt:m,slug:"mymlagentsunity",status:"publish",type:"post",link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F10\u002F06\u002Fmymlagentsunity\u002F",title:{rendered:"Unity | ml-agentsでゼロから機械学習をさせる"},content:{rendered:"\n\u003Cp\u003Eサンプルを動かしても何も新しいものが作れないので、ゼロからいろいろ設定して、機械学習をやってみます。\u003Cbr \u002F\u003Eちなみに知識に関してはまだ勉強中ということで、レベル4くらいなのでその辺はご了承ください。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003E今回のゴール\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E今回は自分でゼロから全部用意して機械学習をさせるまでが目標です。\u003Cbr \u002F\u003E今回の記事ではここまで作ります。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-06-1.09.39.png\" alt=\"\" class=\"wp-image-831\" width=\"458\" height=\"333\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003E敵キャラはUnityちゃんに向かってレイキャストを飛ばして、当たったら報酬を得ます。そんな感じのものです。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E将来的にはピストルに変えていきたいなという願望。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003Eシーンを設定する\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E今回はUnityちゃんを使います。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E敵キャラのAIを作ってみます。敵キャラはUnityちゃんを攻撃してくるという感じにしましょう。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eまずは床とUnityちゃんと敵を配置します。\u003Cbr \u002F\u003EUnityちゃんにはコライダーを持たせておき、タグをUnityChanにしておきます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EEnemyにはRigidBodyをつけておきます。\u003Cbr \u002F\u003Eついでに子要素にライフルを設置します\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-05-2.04.28-576x1024.png\" alt=\"\" class=\"wp-image-815\" width=\"251\" height=\"446\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-05-2.05.53.png\" alt=\"\" class=\"wp-image-816\" width=\"479\" height=\"284\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Ch2\u003E機械学習の準備を行う\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EEnemyに必要なものをアタッチしていきます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EまずはBehaviorParametersを付けてNameをEnemyBehaviorにしておきます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E次にRayPerceptionSensor3Dをアタッチします。\u003Cbr \u002F\u003EDetectableTagsのSizeを1にしてElement0にUnityChanと入力します。\u003Cbr \u002F\u003E\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-05-2.12.43.png\" alt=\"\" class=\"wp-image-818\" width=\"376\" height=\"464\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003Eこれをつけるとシーンビューでレイが自動的に発射されて、物体と当たっている場合は赤い線が表示されます。\u003Cbr \u002F\u003E\u003Cspan class=\"has-inline-color has-vivid-cyan-blue-color\"\u003E※ライフルの位置を調整しました。\u003Cstrong\u003Eあとライフルのboxcolliderを消しました。\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-05-2.14.48.png\" alt=\"\" class=\"wp-image-819\" width=\"426\" height=\"278\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cp\u003Eこのレイで当たっている情報から、ーーーーをAIが観察値として扱ってくれるようです。\u003C\u002Fp\u003E\n\n\n\u003Ch2\u003EAgentを継承したクラスを作る\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EMyAI.csというのを作って以下のようにします。まずは雛形的なものを作ってみます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eusing UnityEngine;\nusing Unity.MLAgents;\nusing Unity.MLAgents.Actuators;\npublic class MyAI : Agent\n{\n    public Transform target;\n    Rigidbody rBody;\n    private bool canShot = true;\n    private int nextShotTime = 0;\n    &#91;SerializeField]\n    private GameObject bulletprefab;\n    &#91;SerializeField]\n    private LayerMask layerMask;\n    public override void Initialize()\n    {\n        this.rBody = GetComponent&lt;Rigidbody\u003E();\n    }\n    public override void OnEpisodeBegin()\n    {\n    }\n    public override void OnActionReceived(ActionBuffers actionBuffers)\n    {\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003EOnEpisodeBegin\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EOnEpisodeBeginメソッドを完成させます。これはエピソード開始時なので学習の最初に呼ばれることになります。やっていることは自身の初期化とターゲットの初期化です。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E床からEnemyが落ちた時はエピソードを終了させるので、位置をリセットする必要があるので床から落ちた時の処理があります。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E    public override void OnEpisodeBegin()\n    {\n        \u002F\u002F床から落ちた時\n        if (this.transform.position.y &lt; 0)\n        {\n            this.rBody.angularVelocity = Vector3.zero;\n            this.rBody.velocity = Vector3.zero;\n            this.transform.position = new Vector3(0f, 0.5f, 0f);\n        }\n        target.localPosition = new Vector3(Random.value * 8 - 4, 0.5f, Random.value + 8 - 4);\n    }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003E\u003Cstrong\u003EOnActionReceived\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E次にOnActionReceivedメソッドを完成させます。\u003Cbr \u002F\u003Eこれは少し複雑ですが\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E簡単にこのメソッドを説明すると、移動と攻撃を選択しています。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E    public override void OnActionReceived(ActionBuffers actionBuffers)\n    {\n        ActionSegment&lt;int\u003E vectorAction = actionBuffers.DiscreteActions;\n        bool isShot = false;\n        Vector3 dirToGo = Vector3.zero;\n        Vector3 rotateDir = Vector3.zero;\n        int action = (int)vectorAction&#91;0];\n        int shot = (int)vectorAction&#91;1];\n        if (action == 1) dirToGo = transform.forward;\n        if (action == 2) dirToGo = transform.forward * -1.0f;\n        if (action == 3) rotateDir = transform.up * -1.0f;\n        if (action == 4) rotateDir = transform.up;\n        \u002F\u002F isShotは２番目の配列要素から受け取れます。\n        if (shot == 1) isShot = true;\n        this.transform.Rotate(rotateDir, Time.deltaTime * 200f);\n        this.rBody.AddForce(dirToGo * 0.3f, ForceMode.VelocityChange);\n        if (this.transform.localPosition.y &lt; 0)\n        {\n            EndEpisode();\n        }\n        \u002F\u002F攻撃\n        if (isShot)\n        {\n            Shot();\n        }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eメソッドを追加する\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EShotメソッドは実際に球を発射するメソッドです。が、今回はレイキャストを発射するだけです。\u003Cbr \u002F\u003EFixedUptedateメソッドは発射した後に発射制限を設けているのでそこの部分の管理を行います。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003E\n    private void Shot()\n    {\n        if (!canShot)\n        {\n            return;\n        }\n        var direction = transform.forward;\n        Debug.DrawRay(transform.position, direction, Color.blue, 1f);\n        if (Physics.Raycast(transform.position, direction, out var hit, 2000f, layerMask))\n        {\n            Debug.Log(\"HIT!!\");\n            AddReward(1f);\n            EndEpisode();\n        }\n        else\n        {\n            AddReward(-0.033f);\n        }\n        canShot = false;\n        nextShotTime = 10;\n    }\n    private void FixedUpdate()\n    {\n        \u002F\u002F 球を発射可能に切り替える\n        if (!canShot)\n        {\n            nextShotTime--;\n            if (nextShotTime &lt;= 0)\n            {\n                canShot = true;\n            }\n        }\n        AddReward(-1f \u002F MaxStep);\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Ch2\u003Eその他の設定\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003EUnityちゃんのレイヤーをPlayerにしておきます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EEnemyの設定も以下の画像のように行なっておきます。\u003Cbr \u002F\u003E今回はプレファブを使うことはしませんが、まぁ後々使うと思うんで一応設定しておきました。\u003C\u002Fp\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-06-22.51.58-535x1024.png\" alt=\"\" class=\"wp-image-836\" width=\"314\" height=\"601\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Cfigure class=\"wp-block-image size-large is-resized\"\u003E\u003Cimg loading=\"lazy\" src=\"https:\u002F\u002Fvolkruss.com\u002Fwp-content\u002Fuploads\u002F2020\u002F10\u002Fスクリーンショット-2020-10-06-22.52.08.png\" alt=\"\" class=\"wp-image-837\" width=\"274\" height=\"296\"\u002F\u003E\u003C\u002Ffigure\u003E\n\n\n\u003Ch2\u003E学習を開始する\u003C\u002Fh2\u003E\n\n\n\u003Cp\u003E作ったMyAIをEnemyにアタッチしたらMaxStepを2000くらいにしておきます。\u003Cbr \u002F\u003EついでにtargetをUnityちゃんにします。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003Eついでにyamlファイルを作ります。\u003Cbr \u002F\u003EEnemy.yamlを作って以下のようにします。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Ebehaviors:\n  EnemyBehavior:\n    trainer_type: ppo\n    hyperparameters:\n      batch_size: 128\n      buffer_size: 2048\n      learning_rate: 0.0003\n      beta: 0.005\n      epsilon: 0.2\n      lambd: 0.95\n      num_epoch: 3\n      learning_rate_schedule: linear\n    network_settings:\n      normalize: true\n      hidden_units: 128\n      num_layers: 2\n      vis_encode_type: simple\n    reward_signals:\n      extrinsic:\n        gamma: 0.99\n        strength: 1.0\n    keep_checkpoints: 5\n    checkpoint_interval : 500000\n    max_steps: 500000\n    time_horizon: 64\n    summary_freq: 1000\n    threaded: true\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003Eあとは学習を開始させます。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E最初はうろうろとその辺を歩き回ります。\u003Cbr \u002F\u003Eちなみに今回は報酬を得るとHIT!!というログを出しております。\u003Cbr \u002F\u003Eだんだんとログの出力頻度が上がってきますのがわかります。\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E最後にコード全文載せておきます。\u003C\u002Fp\u003E\n\n\n\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode\u003Eusing UnityEngine;\nusing Unity.MLAgents;\nusing Unity.MLAgents.Actuators;\npublic class MyAI : Agent\n{\n    public Transform target;\n    Rigidbody rBody;\n    private bool canShot = true;\n    private int nextShotTime = 0;\n    &#91;SerializeField]\n    private GameObject bulletprefab;\n    &#91;SerializeField]\n    private LayerMask layerMask;\n    public override void Initialize()\n    {\n        this.rBody = GetComponent&lt;Rigidbody\u003E();\n    }\n    public override void OnEpisodeBegin()\n    {\n        \u002F\u002F床から落ちた時\n        if (this.transform.position.y &lt; 0)\n        {\n            this.rBody.angularVelocity = Vector3.zero;\n            this.rBody.velocity = Vector3.zero;\n            this.transform.position = new Vector3(0f, 0.5f, 0f);\n        }\n        target.localPosition = new Vector3(Random.value * 8 - 4, 0.5f, Random.value + 8 - 4);\n    }\n    public override void OnActionReceived(ActionBuffers actionBuffers)\n    {\n        ActionSegment&lt;int\u003E vectorAction = actionBuffers.DiscreteActions;\n        bool isShot = false;\n        Vector3 dirToGo = Vector3.zero;\n        Vector3 rotateDir = Vector3.zero;\n        int action = (int)vectorAction&#91;0];\n        int shot = (int)vectorAction&#91;1];\n        if (action == 1) dirToGo = transform.forward;\n        if (action == 2) dirToGo = transform.forward * -1.0f;\n        if (action == 3) rotateDir = transform.up * -1.0f;\n        if (action == 4) rotateDir = transform.up;\n        \u002F\u002F isShotは２番目の配列要素から受け取れます。\n        if (shot == 1) isShot = true;\n        this.transform.Rotate(rotateDir, Time.deltaTime * 200f);\n        this.rBody.AddForce(dirToGo * 0.3f, ForceMode.VelocityChange);\n        if (this.transform.localPosition.y &lt; 0)\n        {\n            EndEpisode();\n        }\n        \u002F\u002F攻撃\n        if (isShot)\n        {\n            Shot();\n        }\n    }\n    private void Shot()\n    {\n        if (!canShot)\n        {\n            return;\n        }\n        var direction = transform.forward;\n        Debug.DrawRay(transform.position, direction, Color.blue, 1f);\n        if (Physics.Raycast(transform.position, direction, out var hit, 2000f, layerMask))\n        {\n            Debug.Log(\"HIT!!\");\n            AddReward(1f);\n            EndEpisode();\n        }\n        else\n        {\n            AddReward(-0.033f);\n        }\n        canShot = false;\n        nextShotTime = 10;\n    }\n    private void FixedUpdate()\n    {\n        \u002F\u002F 球を発射可能に切り替える\n        if (!canShot)\n        {\n            nextShotTime--;\n            if (nextShotTime &lt;= 0)\n            {\n                canShot = true;\n            }\n        }\n        AddReward(-1f \u002F MaxStep);\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\u003Cp\u003E自分でゼロから機械学習の設定を行い、機械学習をすることができました。\u003Cbr \u002F\u003E次は実際のゲームらしくピストルを実際に発射したりしたいなと思います。\u003C\u002Fp\u003E\n",protected:j},excerpt:{rendered:"\u003Cp\u003Eサンプルを動かしても何も新しいものが作れないので、ゼロからいろいろ設定して、機械学習をやってみます。ちなみに知識に関してはまだ勉強中ということで、レベル4くらいなのでその辺はご了承ください。 今回のゴール 今回は自分でゼ&hellip; \u003Ca class=\"more-link\" href=\"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002F2020\u002F10\u002F06\u002Fmymlagentsunity\u002F\"\u003E続きを読む \u003Cspan class=\"screen-reader-text\"\u003EUnity | ml-agentsでゼロから機械学習をさせる\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",protected:j},author:n,featured_media:b,comment_status:o,ping_status:o,sticky:j,template:c,format:"standard",meta:[],categories:[k],tags:[38,51,74],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F814"}],collection:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=814"}],"version-history":[{count:b,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F814\u002Frevisions"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=814"}],"wp:term":[{taxonomy:d,embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=814"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=814"}],curies:[{name:e,href:f,templated:a}]}}}],fetch:{"0":{categories:{categories:[{id:2,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fblender\u002F",name:"Blender",slug:"blender",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F2"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=2"}],curies:[{name:e,href:f,templated:a}]}},{id:p,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fdocker\u002F",name:"Docker",slug:"docker",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F3"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=3"}],curies:[{name:e,href:f,templated:a}]}},{id:i,count:k,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjava\u002F",name:"Java",slug:"java",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F4"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=4"}],curies:[{name:e,href:f,templated:a}]}},{id:q,count:i,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fjavascript\u002F",name:"JavaScript",slug:"javascript",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F5"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=5"}],curies:[{name:e,href:f,templated:a}]}},{id:k,count:40,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funity\u002F",name:"Unity",slug:"unity",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F6"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=6"}],curies:[{name:e,href:f,templated:a}]}},{id:7,count:r,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fvue-js\u002F",name:"Vue.js",slug:"vue-js",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F7"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=7"}],curies:[{name:e,href:f,templated:a}]}},{id:8,count:q,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Fwordpress\u002F",name:"WordPress",slug:"wordpress",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F8"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=8"}],curies:[{name:e,href:f,templated:a}]}},{id:r,count:p,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002F%e3%81%9d%e3%81%ae%e4%bb%96\u002F",name:"その他",slug:"%e3%81%9d%e3%81%ae%e4%bb%96",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F9"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=9"}],curies:[{name:e,href:f,templated:a}]}},{id:n,count:b,description:c,link:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fcategory\u002Funcategorized\u002F",name:"未分類",slug:"uncategorized",taxonomy:d,parent:b,meta:[],_links:{self:[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories\u002F1"}],collection:[{href:g}],about:[{href:h}],"wp:post_type":[{href:"https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts?categories=1"}],curies:[{name:e,href:f,templated:a}]}}]}}},mutations:void 0}}(true,0,"","category","wp","https:\u002F\u002Fapi.w.org\u002F{rel}","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories","https:\u002F\u002Fwww.volkruss.com\u002Fnuxt\u002Fapi\u002Fwp-json\u002Fwp\u002Fv2\u002Ftaxonomies\u002Fcategory",4,false,6,"2020-10-06T01:38:25","2020-10-05T16:38:25",1,"open",3,5,9)));